@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                        <p>Determining session state, please wait...</p>
                    </MudStack>
                </Authorizing>
                <NotAuthorized>
                    @code {
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                var returnUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
                if (returnUrl == "portal")
                {
                        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "returnUrl", returnUrl);
                        Navigation.NavigateTo("authentication/login", true);
                }
            }
        }
                    }

                    <MudStack>
                        <h3>Sorry</h3>
                        <p>You're not authorized to reach this page. Redirecting to login...</p>
                    </MudStack>
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(AuthLayout)">
                </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

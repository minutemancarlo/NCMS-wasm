@page "/gas-pos"
@attribute [Authorize(Roles = "Gas Employee")]
@using NCMS_wasm.Client.Pages.Gas.Components
@using NCMS_wasm.Client.Pages.GeneralComponents

@using NCMS_wasm.Shared
@using System.Globalization
@using Append.Blazor.Printing
@inject IPrintingService PrintingService
<PageTitle>Point of Sales | NCMS</PageTitle>

<LeakPopUp/>

<MudStack Class="w-100">
    <MudText Typo="Typo.h5" Class="p-1">Point of Sales</MudText>
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Width="100%" Height="260px">
                <MudOverlay @bind-Visible="isLoadingGasPrice" DarkBackground AutoClose="false">
                    <MudLoading @bind-Loading="isLoadingGasPrice" Overlap="false" LoaderType="LoaderType.Circular" Darken="true"
                                Color="Color.Primary" />
                </MudOverlay>                
                <MudStack Row AlignItems="AlignItems.Start" Justify="Justify.SpaceEvenly">
                    <MudPaper Class="px-2">
                        <MudDataGrid Items="@subTransaction.AsEnumerable().Reverse().ToList()" T="SubTransaction" FixedFooter Hover
                                     Filterable="false" Elevation="0" ShowFilterIcons="false" HorizontalScrollbar="true" Dense RowsPerPage="5" Striped>
                            <Columns>
                                <PropertyColumn Property="x => x.GasType" HeaderStyle="background-color: black; color: white" Title="Gas Type" Sortable="false">
                                    <CellTemplate>
                                        @context.Item.GasType.ToString()
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.Price" Culture=@(new CultureInfo("en-PH")) HeaderStyle="background-color: black; color: white" Format="C" Sortable="false" CellStyle="background-color: #95a5a6; color: white;" />
                                <PropertyColumn Property="x => x.Value" HeaderStyle="background-color: black; color: white" Title="Liters" Sortable="false" CellStyle="background-color: #95a5a6; color: white;" />
                                <PropertyColumn Property="x => x.VAT" Culture=@(new CultureInfo("en-PH")) HeaderStyle="background-color: black; color: white" Format="C" Sortable="false" CellStyle="background-color: #95a5a6; color: white;" />
                                <PropertyColumn Property="x => x.NetAmount" Title="Net Amount" Culture=@(new CultureInfo("en-PH")) HeaderStyle="background-color: black; color: white" Format="C" Sortable="false" CellStyle="background-color: #95a5a6; color: white;" />
                                <PropertyColumn Property="x => x.Amount" Culture=@(new CultureInfo("en-PH")) HeaderStyle="background-color: black; color: white" Format="C" Sortable="false" CellStyle="background-color: #95a5a6; color: white;" />
                                <PropertyColumn Property="x => x.SubTotal" Culture=@(new CultureInfo("en-PH")) HeaderStyle="background-color: black; color: white" Title="Sub Total" Format="C" Sortable="false" CellStyle="background-color: #95a5a6; color: white;" />
                                <TemplateColumn CellClass="d-flex justify-end" HeaderStyle="background-color: black; color: white" Title="Action" Format="C" Sortable="false">
                                    <CellTemplate>
                                        <MudTooltip Text="Remove Item" Color="Color.Primary" Placement="Placement.Top">
                                            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="@(() => RemoveItem(context.Item))" />
                                        </MudTooltip>
                                    </CellTemplate>
                                </TemplateColumn>
                            </Columns>
                            <NoRecordsContent>
                                <MudText>No Records to show</MudText>
                            </NoRecordsContent>
                            <PagerContent>
                                <MudDataGridPager PageSizeSelector="false" T="SubTransaction" />
                            </PagerContent>

                        </MudDataGrid>
                    </MudPaper>

                    <MudSpacer />
                    <MudStack AlignItems="AlignItems.End">
                        @{
                            string formattedTotal = (Transaction?.Total ?? 0.00m).ToString("C", new System.Globalization.CultureInfo("en-PH"));
                            if ((Transaction?.Discounts ?? 0.00m) != Decimal.Zero)
                            {
                                decimal discounted = (Transaction?.Total ?? 0.00m) - (Transaction?.Discounts ?? 0.00m);
                                formattedTotal = discounted.ToString("C", new System.Globalization.CultureInfo("en-PH"));
                            }

                            string formattedChange = (Transaction?.Change ?? 0m).ToString("C", new System.Globalization.CultureInfo("en-PH"));
                            string formattedDiscount = (Transaction?.Discounts ?? 0m).ToString("C", new System.Globalization.CultureInfo("en-PH"));
                        }
                        <MudText Typo="Typo.h3" Class="p-3"> @formattedTotal</MudText>
                        <MudText Typo="Typo.h6">Change: <strong style="color: red;">@formattedChange</strong></MudText>
                        <MudText Typo="Typo.h6">Discount: <strong style="color: #2ecc71;">@formattedDiscount</strong></MudText>
                        <MudStack Row Class="px-1 py-1">
                            @* <MudIconButton OnClick="TenderTransaction" Disabled="@(Transaction is not null? false:true)" Icon="@Icons.Material.Filled.Check" Color="Color.Success" Variant="Variant.Filled" Size="Size.Large" /> *@
                            <MudIconButton OnClick="Clear" Disabled="@(Transaction is not null? false:true)" Icon="@Icons.Material.Filled.Close" Color="Color.Error" Variant="Variant.Filled" Size="Size.Large" />
                        </MudStack>

                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudLink OnClick="@(async () => await ShowAddTransaction(GasType.Unleaded))" Underline="Underline.None">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="4" Style="background-color: #27ae60">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudStack Spacing="1" Row AlignItems="AlignItems.Center">
                            <MudIcon Icon="fas fa-gas-pump" Size="Size.Large" Class="mr-2" />
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.h6">UNLEADED</MudText>
                                <MudText Typo="Typo.body1">@GasPrices.Unleaded / Liter</MudText>
                            </MudStack>
                        </MudStack>
                        <MudProgressLinear Color="Color.Dark" Rounded Size="Size.Large" Value="@cap_unleaded" Class="my-7">
                            <MudText Typo="Typo.subtitle1">
                                <b class="text-white">@($"{cap_unleaded}%")</b>
                            </MudText>
                        </MudProgressLinear>
                    </MudStack>
                </MudPaper>
            </MudLink>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudLink OnClick="@(async () => await ShowAddTransaction(GasType.Premium))" Underline="Underline.None">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="4" Style="background-color: #4A90E2">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudStack Spacing="1" Row AlignItems="AlignItems.Center">
                            <MudIcon Icon="fas fa-gas-pump" Size="Size.Large" Class="mr-2" />
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.h6">PREMIUM</MudText>
                                <MudText Typo="Typo.body1">@GasPrices.Premium / Liter</MudText>
                            </MudStack>
                        </MudStack>
                        <MudProgressLinear Color="Color.Dark" Rounded Size="Size.Large" Value="@cap_premium" Class="my-7">
                            <MudText Typo="Typo.subtitle1">
                                <b class="text-white">@($"{cap_premium}%")</b>
                            </MudText>
                        </MudProgressLinear>
                    </MudStack>
                </MudPaper>
            </MudLink>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudLink OnClick="@(async () => await ShowAddTransaction(GasType.Regular))" Underline="Underline.None">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="4" Style="background-color: #FFA726">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudStack Spacing="1" Row AlignItems="AlignItems.Center">
                            <MudIcon Icon="fas fa-gas-pump" Size="Size.Large" Class="mr-2" />
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.h6">REGULAR</MudText>
                                <MudText Typo="Typo.body1">@GasPrices.Regular / Liter</MudText>
                            </MudStack>
                        </MudStack>
                        <MudProgressLinear Color="Color.Dark" Rounded Size="Size.Large" Value="@cap_regular" Class="my-7">
                            <MudText Typo="Typo.subtitle1">
                                <b class="text-white">@($"{cap_regular}%")</b>
                            </MudText>
                        </MudProgressLinear>
                    </MudStack>
                </MudPaper>
            </MudLink>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudLink OnClick="@(async () => await ShowAddTransaction(GasType.Diesel))" Underline="Underline.None">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="4" Style="background-color: #B0BEC5">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudStack Spacing="1" Row AlignItems="AlignItems.Center">
                            <MudIcon Icon="fas fa-gas-pump" Size="Size.Large" Class="mr-2" />
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.h6">DIESEL</MudText>
                                <MudText Typo="Typo.body1">@GasPrices.Diesel / Liter</MudText>
                            </MudStack>
                        </MudStack>
                        <MudProgressLinear Color="Color.Dark" Rounded Size="Size.Large" Value="@cap_diesel" Class="my-7">
                            <MudText Typo="Typo.subtitle1">
                                <b class="text-white">@($"{cap_diesel}%")</b>
                            </MudText>
                        </MudProgressLinear>
                    </MudStack>
                </MudPaper>
            </MudLink>
        </MudItem>

        <MudItem xs="6" sm="3">
            <MudLink Underline="Underline.None" OnClick="@(async () => ShowAddDiscount())">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="4" Style="background-color: #e74c3c">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudStack Spacing="1" Row AlignItems="AlignItems.Center">
                            <MudIcon Icon="fas fa-tag" Size="Size.Large" Class="mr-2" />
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.h6">DISCOUNT</MudText>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudLink>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudLink OnClick="@(async () => ShowAddPayment(TransactionType.Points))" Underline="Underline.None">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="4" Style="background-color: #f1c40f">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudStack Spacing="1" Row AlignItems="AlignItems.Center">
                            <MudIcon Icon="fas fa-gifts" Size="Size.Large" Class="mr-2" />
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.h6">LOYALTY CARD</MudText>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </MudPaper>
                <MudPopover Open="@(String.IsNullOrEmpty(cardOwner)?false:true)" Fixed="true" Class="px-4 pt-4" RelativeWidth="true" Style="background-color: #34495e; color: white;" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    <div class="d-flex flex-column">
                        <MudText Typo="Typo.subtitle1"><strong>Loyalty Card No: </strong> @Transaction?.LoyaltyCardId</MudText>
                        <MudText Typo="Typo.subtitle1"> <strong>Owner: </strong> @cardOwner</MudText>
                    </div>
                </MudPopover>
            </MudLink>

        </MudItem>
        <MudItem xs="6" sm="3">
            <MudLink OnClick="@(async () => ShowAddPayment(TransactionType.Cash))" Underline="Underline.None">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="4" Style="background-color: #1abc9c">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudStack Spacing="1" Row AlignItems="AlignItems.Center">
                            <MudIcon Icon="fas fa-money-bill" Size="Size.Large" Class="mr-2" />
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.h6">CASH</MudText>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudLink>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudLink OnClick="@(async () => ShowAddPayment(TransactionType.Card))" Underline="Underline.None">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="4" Style="background-color: #1abc9c">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudStack Spacing="1" Row AlignItems="AlignItems.Center">
                            <MudIcon Icon="fas fa-credit-card" Size="Size.Large" Class="mr-2" />
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.h6">CARD</MudText>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudLink>
        </MudItem>


    </MudGrid>
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h6" Class="pt-2">Transaction History</MudText>
            <MudDataGrid Items="@GasModels" Elevation="4" Striped Hover Dense>
                <Columns>
                    <PropertyColumn Property="x => x.InvoiceNo" Title="Invoice No" HeaderClass="text-nowrap" HeaderStyle="background-color: #2980b9; color: white" CellStyle="background-color: #ecf0f1; color: black" />
                    <PropertyColumn Property="x => x.TransactionType" Title="Transaction Type" HeaderClass="text-nowrap" HeaderStyle="background-color: #2980b9; color: white" CellStyle="background-color: ##ecf0f1; color: black" />
                    <PropertyColumn Property="x => x.CardTransactionId" Title="Card Transaction ID" HeaderClass="text-nowrap" HeaderStyle="background-color: #2980b9; color: white" CellStyle="background-color: ##ecf0f1; color: black" />
                    @* <PropertyColumn Property="x => x.IsVoid" Title="Is Void" HeaderClass="text-nowrap" HeaderStyle="background-color: #2980b9; color: white" CellStyle="background-color: ##ecf0f1; color: black" /> *@
                    @* <PropertyColumn Property="x => x.IsCard" Title="Is Card" HeaderClass="text-nowrap" HeaderStyle="background-color: #2980b9; color: white" CellStyle="background-color: ##ecf0f1; color: black" /> *@
                    <PropertyColumn Property="x => x.Points" Title="Points Earned" HeaderClass="text-nowrap" HeaderStyle="background-color: #2980b9; color: white" CellStyle="background-color: ##ecf0f1; color: black" />
                    <PropertyColumn Property="x => x.Discounts" Title="Discounts" HeaderClass="text-nowrap" HeaderStyle="background-color: #2980b9; color: white" CellStyle="background-color: ##ecf0f1; color: black" />
                    <PropertyColumn Property="x => x.VAT" Title="VAT" HeaderClass="text-nowrap" HeaderStyle="background-color: #2980b9; color: white" CellStyle="background-color: ##ecf0f1; color: black" />
                    <PropertyColumn Property="x => x.Total" Title="Total" HeaderClass="text-nowrap" HeaderStyle="background-color: #2980b9; color: white" CellStyle="background-color: ##ecf0f1; color: black" />
                </Columns>
                <NoRecordsContent>
                    <MudText>No Records to show</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudDataGridPager T="GasModel" />
                </PagerContent>
            </MudDataGrid>
        </MudItem>
    </MudGrid>

</MudStack>
@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; private set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    [Inject] IDialogService? DialogService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] HttpClient? httpClient { get; set; }

    public decimal? DecimalValue { get; set; } = 0.00M;
    private List<GasModel> GasModels = new();
    private GasModel? Transaction { get; set; }
    private GasPrices GasPrices { get; set; } = new();
    private List<SubTransaction> subTransaction { get; set; } = new();
    private bool isLoadingGasPrice = false;
    private bool isLoadingGasTransaction = false;
    private List<GasPrice> gasPrices = new();
    private string? cardOwner = String.Empty;

    #region Gas Capacity
    private double cap_unleaded = 0.00;
    private double cap_regular = 0.00;
    private double cap_premium = 0.00;
    private double cap_diesel = 0.00;
    #endregion


    protected override async Task OnInitializedAsync()
    {
        MainLayout.SubTitle = "Gas Station Management Module";

        await GetGasPrices();
        await GetGasTransactions();

        await base.OnInitializedAsync();
    }

    private async Task GetPOSHistory()
    {
        await Task.CompletedTask;
    }

    private async Task GetGasPrices()
    {
        isLoadingGasPrice = true;

        try
        {
            gasPrices = await httpClient.GetFromJsonAsync<List<GasPrice>>("Gas/GetGasPrices");
            if (gasPrices is not null)
            {
                GasPrices = new GasPrices
                    {
                        Diesel = gasPrices.FirstOrDefault(x => x.GasType == GasType.Diesel).Price,
                        Premium = gasPrices.FirstOrDefault(x => x.GasType == GasType.Premium).Price,
                        Regular = gasPrices.FirstOrDefault(x => x.GasType == GasType.Regular).Price,
                        Unleaded = gasPrices.FirstOrDefault(x => x.GasType == GasType.Unleaded).Price
                    };
                cap_diesel = gasPrices.FirstOrDefault(x => x.GasType == GasType.Diesel).CapacityRemaining;
                cap_regular = gasPrices.FirstOrDefault(x => x.GasType == GasType.Regular).CapacityRemaining;
                cap_premium = gasPrices.FirstOrDefault(x => x.GasType == GasType.Premium).CapacityRemaining;
                cap_unleaded = gasPrices.FirstOrDefault(x => x.GasType == GasType.Unleaded).CapacityRemaining;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception Occured: {ex.Message}");
        }
        finally
        {
            isLoadingGasPrice = false;
        }
    }

    private async Task GetGasTransactions()
    {
        isLoadingGasTransaction = true;

        try
        {
            GasModels = await httpClient.GetFromJsonAsync<List<GasModel>>("Gas/GetGasTransactions");
            if (gasPrices is not null)
            {

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception Occured: {ex.Message}");
        }
        finally
        {
            isLoadingGasTransaction = false;
        }
    }

    private void Clear()
    {
        subTransaction = new();
        Transaction = null;
        cardOwner = String.Empty;
    }

    private async Task RemoveItem(SubTransaction item)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                FullWidth = false,
                MaxWidth = MaxWidth.Small,
                BackdropClick = false,
                CloseButton = false

            };

        var confirmationParameters = new DialogParameters<ConfirmationDialog>
                {
                    { x => x.Action, "Remove Item from list?"}
                };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("", confirmationParameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var confirmed = (bool)result.Data;
            if (confirmed == true)
            {
                Transaction.Total = Transaction.Total - item.SubTotal;
                subTransaction.Remove(item);
                if (subTransaction.Count() == 0)
                {
                    Transaction = null;
                }
                Snackbar.Add("Item Removed.", Severity.Success);
            }
        }
    }

    private async Task TenderTransaction()
    {
        if (Transaction.IsCard)
        {
            if (string.IsNullOrEmpty(Transaction.CardTransactionId))
            {
                Snackbar.Add("Please add card transaction id", Severity.Error);
                return;
            }

        }

        if (!Transaction.IsCard)
        {

            if (Transaction.CashReceived <= decimal.Zero)
            {
                Snackbar.Add("Please get the payment in cash", Severity.Error);
                return;
            }
        }



        await Task.CompletedTask;
    }

    private async Task ShowAddPayment(TransactionType transactionType)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackdropClick = true,
                CloseButton = true
            };

        if (Transaction is null)
        {
            Snackbar.Add("Please add transaction", Severity.Error);
            return;
        }


        if (transactionType == TransactionType.Points)
        {
            await ShowScanLoyaltyCard();
            return;
        }


        var total = (Transaction?.Discounts ?? 0.00m) != Decimal.Zero ? Transaction.DiscountedTotal : Transaction.Total;
        var parameters = new DialogParameters<AddPaymentDialog>
        {
            {x => x.Title, transactionType.ToString()},
            {x => x.Total, total }
        };
        var dialog = await DialogService.ShowAsync<AddPaymentDialog>("Simple Dialog", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var model = result.Data as Payment;

            if (model != null)
            {
                if (transactionType == TransactionType.Card)
                {
                    if (string.IsNullOrEmpty(model.CardTransactionId))
                    {
                        Snackbar.Add("Please add card transaction id", Severity.Error);
                        return;
                    }
                    Transaction.CardTransactionId = model.CardTransactionId;
                    Transaction.CreatedBy = MainLayout.CurrentUserId;
                    Transaction.VAT = subTransaction.Sum(p => p.VAT);
                    Transaction.Points = CalculateLoyaltyOrRedemption(Transaction.Total, false);
                    Transaction.IsCard = true;
                    Transaction.TransactionType = TransactionType.Card;


                    await OnSubmit(Transaction, subTransaction);

                    Clear();
                }

                if (transactionType == TransactionType.Cash)
                {
                    if (model.CashReceived <= decimal.Zero)
                    {
                        Snackbar.Add("Please add amount to cash received", Severity.Error);
                        return;
                    }
                    Transaction.Change = model.Change;
                    Transaction.CashReceived = model.CashReceived;
                    Transaction.VAT = subTransaction.Sum(p => p.VAT);
                    Transaction.Points = CalculateLoyaltyOrRedemption(Transaction.Total, false);
                    Transaction.CreatedBy = MainLayout.CurrentUserId;

                    await OnSubmit(Transaction, subTransaction);

                }
            }

            StateHasChanged();
        }
    }

    private async Task OnSubmit(GasModel transactions, List<SubTransaction> subTransactions)
    {
        try
        {
            var payload = new TransactionRequest
                {
                    Transaction = transactions,
                    SubTransactions = subTransactions
                };

            var response = await httpClient.PostAsJsonAsync("Gas/InsertTransaction", payload);

            if (response.IsSuccessStatusCode)
            {
                var invoiceNo = await response.Content.ReadAsStringAsync();
                await OnPrintReceipt(invoiceNo);
                await GetGasTransactions();
                Clear();
            }
            else
            {

                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to insert transaction: {response.StatusCode} - {errorMessage}", Severity.Error);
                Console.WriteLine($"Failed to insert transaction: {response.StatusCode} - {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to insert transaction: {ex.Message}", Severity.Error);
        }
    }

    static decimal CalculateLoyaltyOrRedemption(decimal amount, bool isRedeem)
    {
        const decimal pointsPerCurrencyUnit = 1.5m; // Example: 1.5 points per peso
        const decimal valuePerPoint = 0.10m; // Example: ₱0.10 per point

        if (isRedeem)
        {
            // Calculate loyalty points first
            decimal loyaltyPoints = amount * pointsPerCurrencyUnit;
            // Calculate redemption value
            return loyaltyPoints * valuePerPoint;
        }
        else
        {
            // Calculate loyalty points
            return amount * pointsPerCurrencyUnit;
        }
    }

    private async Task ShowAddTransaction(GasType gasType)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                FullWidth = false,
                MaxWidth = MaxWidth.Small,
                BackdropClick = true,
                CloseButton = false
            };

        decimal price = 0.00M;
        switch (gasType)
        {
            case GasType.Unleaded:
                price = GasPrices.Unleaded;
                break;
            case GasType.Premium:
                price = GasPrices.Premium;
                break;
            case GasType.Regular:
                price = GasPrices.Regular;
                break;
            case GasType.Diesel:
                price = GasPrices.Diesel;
                break;
        }
        var parameters = new DialogParameters<AddTransaction>
        {
            {x => x.GasClassification, gasType.ToString()},
            {x => x.Price, price}
        };
        var dialog = await DialogService.ShowAsync<AddTransaction>("", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var model = result.Data as GasTransaction;

            if (model != null)
            {
                decimal total = model.GasValue * model.GasAmount;
                decimal VAT = total * 0.12M;
                if (total <= decimal.Zero)
                {
                    Snackbar.Add("Invalid Value/Amount", Severity.Error);
                    return;
                }
                if (Transaction is null)
                {
                    Transaction = new();
                }
                var subTrans = new SubTransaction
                    {
                        GasType = gasType,
                        Amount = model.GasAmount,
                        Price = price,
                        Value = model.GasValue,
                        VAT = Math.Round(VAT, 2),
                        NetAmount = total - Math.Round(VAT, 2),
                        SubTotal = total,
                        CreatedBy = MainLayout.CurrentUserId
                    };
                subTransaction.Add(subTrans);
                Transaction.GasValues.GasValue = Transaction.GasValues.GasValue + model.GasValue;
                Transaction.GasValues.GasAmount = Transaction.GasValues.GasAmount + model.GasAmount;
                Transaction.Total = Transaction.Total + total;
            }

            StateHasChanged();
        }
    }

    private async Task ShowAddDiscount()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackdropClick = true,
                CloseButton = true
            };

        if (Transaction is null)
        {
            Snackbar.Add("Please add transaction", Severity.Error);
            return;
        }

        var parameters = new DialogParameters<AddDiscountDialog>
        {
            {x => x.Title, "Add Discount"},
        { x => x.Discount, Transaction.Discounts }
        };
        var dialog = await DialogService.ShowAsync<AddDiscountDialog>("Simple Dialog", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var discount = (decimal)result.Data;

            if (discount != null)
            {
                Snackbar.Add("Discount Added", Severity.Success);
                Transaction.Discounts = discount;
                Transaction.DiscountedTotal = Transaction.Total - discount;
            }

            StateHasChanged();
        }
    }

    private async Task ShowScanLoyaltyCard()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackdropClick = true,
                CloseButton = true
            };
        var parameters = new DialogParameters<AddCardDialog>
        {
            {x=>x.userId,MainLayout.CurrentUserId },
            {x=>x.viewType,ViewType.Earn}
        };

        if (Transaction is null)
        {
            Snackbar.Add("Please add transaction", Severity.Error);
            return;
        }

        var dialog = await DialogService.ShowAsync<AddCardDialog>("Simple Dialog", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var cardInfo = result.Data as LoyaltyCardInfo;
            if (cardInfo is not null)
            {

                cardOwner = $"{cardInfo.FirstName} {cardInfo.MiddleName} {cardInfo.LastName}";
                Transaction.LoyaltyCardId = cardInfo.CardReference;
            }
            else
            {
                Snackbar.Add("Loyalty card not recognized.", Severity.Error);
            }
            StateHasChanged();
        }
    }

    private async Task OnPrintReceipt(string invoiceNo)
    {
        try
        {



            var url = $"Report/GetReceiptPrint?invoiceNo={invoiceNo}";

            var response = await httpClient.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                var pdfContent = await response.Content.ReadAsByteArrayAsync();
                // var blobUrl = $"data:application/pdf;base64,{Convert.ToBase64String(pdfContent)}";
                PrintingService.Print(new PrintOptions(Convert.ToBase64String(pdfContent)) { Base64 = true });                   
            }
            else
            {
                Snackbar.Add("Failed to generate the report.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to generate the report. Error Info: {ex.Message}", Severity.Error);
        }

    }

}

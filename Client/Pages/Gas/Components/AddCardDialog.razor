@using NCMS_wasm.Shared
@using NCMS_wasm.Client.Pages.Validations
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.CardTravel"></MudIcon>
            Card Holder Information
        </MudText>
    </TitleContent>
    <DialogContent>
        @* <MudForm @ref="form" Model="@rfidInfo" Validation="@(modelValidator.ValidateValue)" ValidationDelay="0"> *@
        <MudForm @ref="form" Model="@rfidInfo" Validation="@(modelValidator.ValidateValue)" ValidationDelay="0">

            <MudFocusTrap Disabled="false" DefaultFocus="DefaultFocus.FirstChild">
                <MudTextField @bind-Value="rfidInfo.CardReference"
                              @ref="rfidReader" ReadOnly
                              TextChanged="OnTextChangedAsync"
                              Label="RFID No." Clearable
                              HelperId="Tap RFID Card in the scanner"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.DocumentScanner"
                              AdornmentColor="Color.Info"
                              ShrinkLabel
                              AutoFocus
                              For="@(() => rfidInfo.CardReference)"
                              Variant="Variant.Outlined"></MudTextField>
            </MudFocusTrap>

            <MudStack Row>
                <MudTextField @bind-Value="rfidInfo.FirstName" ReadOnly="@(viewType == ViewType.ReadOnly? true: false)" For="@(() => rfidInfo.FirstName)" Label="First Name" Variant="Variant.Outlined"></MudTextField>
                <MudTextField @bind-Value="rfidInfo.MiddleName" ReadOnly="@(viewType == ViewType.ReadOnly? true: false)" For="@(() => rfidInfo.MiddleName)" Label="Middle Name" Variant="Variant.Outlined"></MudTextField>
                <MudTextField @bind-Value="rfidInfo.LastName" ReadOnly="@(viewType == ViewType.ReadOnly? true: false)" For="@(() => rfidInfo.LastName)" Label="Last Name" Variant="Variant.Outlined"></MudTextField>
            </MudStack>
            <MudTextField @bind-Value="rfidInfo.PhoneNumber" ReadOnly="@(viewType == ViewType.ReadOnly? true: false)" For="@(() => rfidInfo.PhoneNumber)" Label="Phone Number" Variant="Variant.Outlined"></MudTextField>
            <MudTextField @bind-Value="rfidInfo.Email" ReadOnly="@(viewType == ViewType.ReadOnly? true: false)" For="@(() => rfidInfo.Email)" Label="Email Address" Variant="Variant.Outlined"></MudTextField>
            @if (viewType == ViewType.ReadOnly)
            {
                <MudText Typo="Typo.body1"><strong>Points Earned: </strong> @rfidInfo.Points </MudText>
            }
            @if (isVisibleWarning)
            {
                <MudText Typo="Typo.body1" Class="text-danger">No results found.</MudText>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (viewType == ViewType.Add || viewType == ViewType.Update)
        {
            <MudLoadingButton Variant="Variant.Filled"
                              Color="Color.Success"
                              Size="Size.Large"
                              Loading="@(_loading)"
                              OnClick="OnSubmit"
                              ButtonType="ButtonType.Button">
                <LoadingContent>Submitting...</LoadingContent>
                <ChildContent>Submit</ChildContent>
            </MudLoadingButton>
        }

        @if (viewType == ViewType.Earn)
        {
            <MudLoadingButton Variant="Variant.Filled"
                              Color="Color.Success"
                              Size="Size.Large"
                              Loading="@(_loading)"
                              OnClick="OnSubmitEarn"
                              ButtonType="ButtonType.Button">
                <LoadingContent>Submitting...</LoadingContent>
                <ChildContent>Submit</ChildContent>
            </MudLoadingButton>
        }

    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    [Parameter] public string userId { get; set; }
    [Parameter] public ViewType viewType { get; set; }
    MudForm form;
    private LoyaltyCardInfo? rfidInfo { get; set; }
    private bool _loading = false;
    MudTextField<string>? rfidReader;
    private List<UserDto> usersList = new List<UserDto>();
    LoyaltyCardValidator modelValidator = new LoyaltyCardValidator();
    private bool isVisibleWarning = false;
    public string rfidValue;


    [JSInvokable]
    public void ReceiveRfidData(string data)
    {
        rfidInfo.CardReference = String.Empty;
        rfidInfo.CardReference = data;
        StateHasChanged();
    }

    private async Task OnSubmit()
    {

        try
        {
            await form.Validate();

            if (form.IsValid)
            {

                rfidInfo.CreatedBy = userId;
                var response = await httpClient.PostAsJsonAsync("Gas/AddLoyaltyCardInfo", rfidInfo);

                if (response.IsSuccessStatusCode)
                {
                    var responseCode = await response.Content.ReadAsStringAsync();
                    if (responseCode != "-1")
                    {
                        Snackbar.Add($"Loyalty Card Added!", Severity.Success);
                        MudDialog.Close(DialogResult.Ok(true));
                    }
                    else
                    {
                        Snackbar.Add($"Loyalty Card already exist.", Severity.Warning);
                    }
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Failed to insert transaction: {response.StatusCode} - {errorMessage}", Severity.Error);
                    Console.WriteLine($"Failed to insert transaction: {response.StatusCode} - {errorMessage}");
                }
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occured: {ex.Message}", Severity.Error);
        }
        finally
        {
            var a = 1;
        }
    }

    private async Task OnSubmitEarn()
    {

        try
        {
            rfidInfo.CreatedBy = userId;
            MudDialog.Close(DialogResult.Ok(rfidInfo));

        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occured: {ex.Message}", Severity.Error);
        }
       
    }

    protected override async Task OnInitializedAsync()
    {
        rfidInfo = new LoyaltyCardInfo();
        await JSRuntime.InvokeVoidAsync("startKeyboardListener", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();
    }

    private async Task LoadUsers()
    {
        try
        {
            usersList = await httpClient.GetFromJsonAsync<List<UserDto>>("UserManagement/UsersList");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }



    private async Task OnTextChangedAsync()
    {
        if (!String.IsNullOrEmpty(rfidInfo.CardReference))
        {
            if (viewType == ViewType.ReadOnly || viewType == ViewType.Earn)
            {
                rfidInfo = await httpClient.GetFromJsonAsync<LoyaltyCardInfo>($"Gas/GetCardInfo?cardReference={rfidInfo.CardReference}");
                if (rfidInfo.FirstName is null)
                {
                    isVisibleWarning = true;
                }
                else
                {
                    isVisibleWarning = false;
                }
            }
            await rfidReader.SelectRangeAsync(0, rfidReader.Value.ToString().Length);
        }
    }



    void Cancel() => MudDialog.Cancel();

}
@using NCMS_wasm.Shared
@using NCMS_wasm.Client.Pages.Validations

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.CardTravel"></MudIcon>
            Add Transaction for @GasClassification
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form">
            <MudText Typo="Typo.h6">Price/L: @Price</MudText>
            <MudNumericField @bind-Value="GasTransaction.GasValue" @ref="gasValueField" Format="N2" AutoFocus onfocus="@(() => OnfocusValue(true))" TextChanged="@(() => OnChangeValue(GasTransaction.GasValue, true))" OnKeyUp="HandleKeyUp" Label="Value" Variant="Variant.Outlined" HideSpinButtons Margin="Margin.Normal" />
            <MudNumericField @bind-Value="GasTransaction.GasAmount" @ref="@gasAmountField" Format="N2" onfocus="@(() => OnfocusValue(false))" TextChanged="@(() => OnChangeValue(GasTransaction.GasAmount, false))" OnKeyUp="@HandleKeyUpAmount" Label="Amount" Variant="Variant.Outlined" HideSpinButtons Margin="Margin.Normal" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudLoadingButton Variant="Variant.Filled"
                          Color="Color.Success"
                          Size="Size.Large"
                          Loading="@(_loading)"
                          OnClick="OnSubmit"
                          ButtonType="ButtonType.Button">
            <LoadingContent>Submitting...</LoadingContent>
            <ChildContent>Submit</ChildContent>
        </MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public string GasClassification { get; set; }
    [Parameter] public decimal Price { get; set; }
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    MudForm form;
    private bool _loading = false;
    private GasTransaction GasTransaction { get; set; } = default!;
    MudNumericField<decimal> gasValueField;
    MudNumericField<decimal> gasAmountField;

    protected override async Task OnInitializedAsync()
    {
        GasTransaction = new GasTransaction
            {
                GasValue = 1,
                GasAmount = Price
            };
        await base.OnInitializedAsync();
    }


    void Cancel() => MudDialog.Cancel();

    private void OnSubmit() => MudDialog.Close(DialogResult.Ok(GasTransaction));
    private async Task OnfocusValue(bool isValue)
    {
        if(isValue){

            await gasValueField.SelectRangeAsync(0, gasValueField.Value.ToString().Length);
        }
        else
        {
            await gasAmountField.SelectRangeAsync(0, gasAmountField.Value.ToString().Length);

        }
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OnSubmit();
        }
        else if (e.Key == "Escape")
        {
            Cancel();
        }
        else
        {

        }
    }

    private void HandleKeyUpAmount(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OnSubmit();
        }
        else if (e.Key == "Escape")
        {
            Cancel();
        }
        else
        {
            // OnChangeValue(GasTransaction.GasValue, false);
        }
    }

    private void OnChangeValue(decimal value, bool IsValue)
    {
        if (IsValue)
        {
            var total = value * Price;
            GasTransaction.GasAmount = Math.Round(total,2);
        }
        else
        {
            var total = value / Price;
            GasTransaction.GasValue = Math.Round(total,2);
        }
    }



}

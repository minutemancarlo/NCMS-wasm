@using NCMS_wasm.Shared
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.CalendarMonth"></MudIcon>
           Add Event Information
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="@events">                                  
            <MudTextField @bind-Value="events.EventName" Label="Holiday Description" Variant="Variant.Outlined"></MudTextField>
            <MudStack Row>
                <MudDatePicker Label="From Date" @bind-Date="events.EventStart" />   
                <MudDatePicker Label="To Date" @bind-Date="events.EventStart" />
            </MudStack>            
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudLoadingButton Variant="Variant.Filled"
                          Color="Color.Success"
                          Size="Size.Large"
                          Loading="@(_loading)"
                          OnClick="OnSubmit"
                          ButtonType="ButtonType.Button">
            <LoadingContent>Submitting...</LoadingContent>
            <ChildContent>Submit</ChildContent>
        </MudLoadingButton>
    </DialogActions>
</MudDialog>

@code{
    MudForm form;
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }    
    [Parameter] public DateTime? StartDate { get; set; }
    [Parameter] public DateTime? EndDate { get; set; }
    private Events? events {get;set;}
    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        events = new Events();
        events.EventStart = StartDate;
        events.EventEnd = EndDate;
        await base.OnInitializedAsync();
    }

    void Cancel() => MudDialog.Cancel();
   

    private async Task OnSubmit()
    {
        _loading = true;
        try
        {
            events.IsApproved = true;
            var response = await httpClient.PostAsJsonAsync("Events/AddUpdateEvent", events);
            response.EnsureSuccessStatusCode();
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                Snackbar.Add("Holiday has been added.", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to save event info: {response.StatusCode} - {errorMessage}", Severity.Error);
                Console.WriteLine($"Failed to save event info: {response.StatusCode} - {errorMessage}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception Occured: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }


    }

}
@using NCMS_wasm.Shared
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.CalendarMonth"></MudIcon>
            Event Information
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.body1">Type: <strong>@eventType.ToString()</strong> </MudText>
        @if(eventType == EventsType.Leave)
        {
            <MudText Typo="Typo.body1">Employee Name: <strong>@description.Split(" - ")[0]</strong> </MudText>
            <MudText Typo="Typo.body1">Leave Type: <strong>@description.Split(" - ")[1]</strong> </MudText>
        }
        else
        {
            <MudText Typo="Typo.body1">Holiday Description: <strong>@description</strong> </MudText>
            <MudText Typo="Typo.body1">Holiday Type: <strong>@type</strong> </MudText>
        }
        <MudText Typo="Typo.body1">From: <strong>@($"{from:MMMM d, yyyy}")</strong> </MudText>
        <MudText Typo="Typo.body1">To: <strong>@($"{to:MMMM d, yyyy}")</strong> </MudText>

    </DialogContent>
    <DialogActions>
        @if (enableDelete)
        {
            <MudLoadingButton Variant="Variant.Filled"
                              Color="Color.Error"
                              Size="Size.Large"
                              Loading="@(_loading)"
                              OnClick="OnDelete"
                              ButtonType="ButtonType.Button">
                <LoadingContent>Deleting...</LoadingContent>
                <ChildContent>Delete</ChildContent>
            </MudLoadingButton>
        }        
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>

@code{
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    void Cancel() => MudDialog.Cancel();
    [Parameter] public int eventId { get; set; }
    [Parameter] public EventsType eventType {get;set;}
    [Parameter] public string description { get; set; }
    [Parameter] public string type { get; set; }
    [Parameter] public DateTime? from { get; set; }
    [Parameter] public DateTime? to { get; set; }
    [Parameter] public bool enableDelete { get;set; }
    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {       
        await base.OnInitializedAsync();
    }



    private async Task OnDelete()
    {
        _loading = true;
        try
        {
            var events = new Events
                {
                    EventId = eventId
                };
            var response = await httpClient.PostAsJsonAsync("Events/DeleteEvent", events);
            response.EnsureSuccessStatusCode();
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                Snackbar.Add("Holiday has been deleted.", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to save event info: {response.StatusCode} - {errorMessage}", Severity.Error);
                Console.WriteLine($"Failed to save event info: {response.StatusCode} - {errorMessage}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception Occured: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }


    }

}

@using NCMS_wasm.Shared
@using NCMS_wasm.Client.Pages.Validations
@using System.Text.Json
@using System.Text.Json.Serialization
@using NCMS_wasm.Client.Pages.HR.Components
@inject AuthenticationStateProvider AuthenticationStateProvider
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PersonAdd"></MudIcon>
            Add Employee
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="@employeeInfo" Validation="@(modelValidator.ValidateValue)" ValidationDelay="0">
            <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudItem xs="4">
                    <MudPaper Style="width: 192px; height: 192px;" Class="text-center" Elevation="0">
                        <MudImage Src="@employeeInfo.imageUrl" Height="192" Width="192" Class="pb-1" />
                        <MudFileUpload T="IBrowserFile" Accept=".png, .jpg, .jpeg" Class="" MaximumFileCount="1" FilesChanged="UploadFiles">
                            <ActivatorContent>
                                <MudFab HtmlTag="label"
                                        Size="MudBlazor.Size.Small"
                                        Color="MudBlazor.Color.Secondary"
                                        StartIcon="@Icons.Material.Filled.Image"
                                        Label="Select Image" />
                            </ActivatorContent>
                        </MudFileUpload>
                    </MudPaper>
                </MudItem>
                <MudItem xs="6">
                    <MudText Typo="Typo.caption">Personal Information</MudText>
                    <MudTextField @bind-Value="employeeInfo.Name" For="@(() => employeeInfo.Name)" Label="Name" Class="pt-1" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudTextField @bind-Value="employeeInfo.Address" For="@(() => employeeInfo.Address)" Label="Address" Class="pt-1" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudStack Row>
                        <MudTextField @bind-Value="employeeInfo.Phone" For="@(() => employeeInfo.Phone)" Label="Phone" Class="pt-1" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                        <MudTextField @bind-Value="employeeInfo.Email" For="@(() => employeeInfo.Email)" Label="Email" Class="pt-1" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    </MudStack>
                    <MudStack Row AlignItems="AlignItems.Baseline">
                        <MudText>Gender: </MudText>
                        <MudRadioGroup @bind-Value="employeeInfo.Gender" For="@(() => employeeInfo.Gender)">
                            <MudRadio Value="@("Male")" Color="Color.Success" Size="Size.Small">Male</MudRadio>
                            <MudRadio Value="@("Female")" Color="Color.Success" Size="Size.Small">Female</MudRadio>
                        </MudRadioGroup>
                    </MudStack>
                    <MudStack Row AlignItems="AlignItems.Baseline">
                        <MudText>Civil Status: </MudText>
                        <MudRadioGroup @bind-Value="employeeInfo.CivilStatus" For="@(() => employeeInfo.CivilStatus)">
                            <MudRadio Value="@("Single")" Color="Color.Success" Size="Size.Small">Single</MudRadio>
                            <MudRadio Value="@("Married")" Color="Color.Success" Size="Size.Small">Married</MudRadio>
                            <MudRadio Value="@("Separated")" Color="Color.Success" Size="Size.Small">Separated</MudRadio>
                            <MudRadio Value="@("Widowed")" Color="Color.Success" Size="Size.Small">Widowed</MudRadio>
                        </MudRadioGroup>
                    </MudStack>

                    <MudTextField @bind-Value="employeeInfo.PlaceOfBirth" For="@(() => employeeInfo.PlaceOfBirth)" Label="Place of Birth" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudDatePicker Label="Date of Birth" For="@(() => employeeInfo.DateOfBirth)" Class="pt-1" Editable="true" Margin="Margin.Dense" @bind-Date="employeeInfo.DateOfBirth" Variant="Variant.Outlined" Placeholder="Select Date" />


                </MudItem>
            </MudStack>
            <MudDivider />
            <MudText Typo="Typo.caption">Employment Information</MudText>
            <MudStack Row>
                <MudItem xs="6">
                    <MudSelect T="EmploymentStatus" @bind-Value="employeeInfo.EmploymentStatus" For="@(() => employeeInfo.EmploymentStatus)" Class="pt-1" Label="Employment Status" Variant="Variant.Outlined" Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@(EmploymentStatus.Probationary)" />
                        <MudSelectItem Value="@(EmploymentStatus.Regular)" />
                        <MudSelectItem Value="@(EmploymentStatus.Resigned)" />
                    </MudSelect>
                    <MudDatePicker Label="Date Hired" For="@(() => employeeInfo.DateHired)" Class="pt-1" Margin="Margin.Dense" Editable="true" Variant="Variant.Outlined" @bind-Date="employeeInfo.DateHired" Placeholder="Select Date" />
                    <MudTextField @bind-Value="employeeInfo.Position" For="@(() => employeeInfo.Position)" Class="pt-1" Label="Position" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudSelect T="Department" @bind-Value="employeeInfo.Department" Class="pt-1" Label="Department" Variant="Variant.Outlined" Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@(Department.None)" />
                        <MudSelectItem Value="@(Department.HR)" />
                        <MudSelectItem Value="@(Department.Gas)" />
                    </MudSelect>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-Value="employeeInfo.Salary" For="@(() => employeeInfo.Salary)" Class="pt-1" Label="Salary" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudTextField @bind-Value="employeeInfo.SSS" For="@(() => employeeInfo.SSS)" Class="pt-1" Label="SSS ID" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudTextField @bind-Value="employeeInfo.PagIbig" For="@(() => employeeInfo.PagIbig)" Class="pt-1" Label="Pag-Ibig ID" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudTextField @bind-Value="employeeInfo.PHIC" For="@(() => employeeInfo.PHIC)" Class="pt-1" Label="PhilHealth ID" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
            </MudStack>
            <MudDivider />
            <MudStack Row>
                <MudItem xs="6">
                    <MudText Typo="Typo.caption">Emergency Contact</MudText>
                    <MudTextField @bind-Value="employeeInfo.EmergencyContactName" For="@(() => employeeInfo.EmergencyContactName)" Class="pt-1" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudTextField @bind-Value="employeeInfo.EmergencyContactPhone" For="@(() => employeeInfo.EmergencyContactPhone)" Class="pt-1" Label="Phone" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudTextField @bind-Value="employeeInfo.EmergencyContactAddress" For="@(() => employeeInfo.EmergencyContactAddress)" Class="pt-1" Label="Address" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudTextField @bind-Value="employeeInfo.EmergencyContactRelationship" For="@(() => employeeInfo.EmergencyContactRelationship)" Class="pt-1" Label="Relationship" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="6">
                    <MudText Typo="Typo.caption">Beneficiary Information</MudText>
                    <MudTextField @bind-Value="employeeInfo.BeneficiaryName" For="@(() => employeeInfo.BeneficiaryName)" Label="Name" Class="pt-1" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudTextField @bind-Value="employeeInfo.BeneficiaryContactInfo" For="@(() => employeeInfo.BeneficiaryContactInfo)" Class="pt-1" Label="Phone" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudTextField @bind-Value="employeeInfo.BeneficiaryRelationship" For="@(() => employeeInfo.BeneficiaryRelationship)" Class="pt-1" Label="Relationship" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.DocumentScanner" OnClick="@(() => ScanCard(employeeInfo.IDNumber))" Class="mt-1" FullWidth>@(String.IsNullOrEmpty(employeeInfo.CardReference) ? "Scan ID Card" : "Modify ID Card")</MudButton>

                </MudItem>
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudLoadingButton Variant="Variant.Filled"
                          Color="Color.Success"
                          Size="Size.Large"
                          Loading="@(_loading)"
                          OnClick="OnSubmit"
                          ButtonType="ButtonType.Button">
            <LoadingContent>Submitting...</LoadingContent>
            <ChildContent>Submit</ChildContent>
        </MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {


    [Parameter] public Employee? employeeInfo { get; set; } = default!;
    MudForm form;
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IDialogService? DialogService { get; set; }

    EmployeeValidator modelValidator = new EmployeeValidator();
    private bool _loading { get; set; }

    [Parameter] public string? currentUserId { get; set; }
    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
    }

    void Cancel() => MudDialog.Cancel();
    private async Task ScanCard(string? employeeId)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackdropClick = false,
                CloseButton = true
            };
        var parameters = new DialogParameters<IDCardScanner>
        {
            {x => x.employeeId, employeeId}

        };
        var dialog = await DialogService.ShowAsync<IDCardScanner>("Simple Dialog", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var cardId = result.Data.ToString();

            // if (tempCards.Any())
            // {
            //     // Find if an RFIDCard with the same RoomNumber already exists
            //     // var existingCard = bookingInfo.AccessCard.FirstOrDefault(ac => ac.RoomNumber == RoomNumber);
            //     var existingCard = tempCards.FirstOrDefault(ac => ac.RoomNumber == RoomNumber);

            //     if (existingCard != null)
            //     {
            //         // Update the CardReference if the card exists
            //         existingCard.CardReference = cardId;
            //     }
            //     else
            //     {
            //         // Add a new RFIDCard if the RoomNumber doesn't exist
            //         // var rfidCard = new RFIDCard
            //         //     {
            //         //         CardReference = cardId,
            //         //         IsActive = true,
            //         //         RoomNumber = RoomNumber,
            //         //         Type = RFIDType.Access
            //         //     };
            //         // tempCards.Add(rfidCard);


            //     }
            // }
            // else
            // {
            //     // var rfidCard = new RFIDCard
            //     //     {
            //     //         CardReference = cardId,
            //     //         IsActive = true,
            //     //         RoomNumber = RoomNumber,
            //     //         Type = RFIDType.Access
            //     //     };
            //     // tempCards.Add(rfidCard);

            //     // bookingInfo.AccessCard.Add(rfidCard);

            // }

        }
    }

    private async Task OnSubmit()
    {

        try
        {
            _loading = true;

            await form.Validate();
            if (form.IsValid)
            {
                if (String.IsNullOrEmpty(employeeInfo.IDNumber))
                {
                    employeeInfo.CreatedBy = currentUserId;
                }
                else
                {
                    employeeInfo.UpdatedBy = currentUserId;
                }

                var options = new JsonSerializerOptions
                    {
                        DefaultIgnoreCondition = JsonIgnoreCondition.Never  // This ensures that null properties are not ignored
                    };

                var response = await httpClient.PostAsJsonAsync("Employee/AddUpdateEmployee", employeeInfo, options);
                // response.EnsureSuccessStatusCode();
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadAsStringAsync();
                    Snackbar.Add("Employee Information Updated", MudBlazor.Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
                    {
                        // Handle the specific case of a bad request, such as an "Email Already Exists" error
                        Snackbar.Add($"Email Address already exist", Severity.Error);
                        Console.WriteLine($"Failed to save employee info: {response.StatusCode} - {errorMessage}");
                    }
                    else
                    {
                        // Handle other potential errors
                        Snackbar.Add($"Unexpected error: {response.StatusCode} - {errorMessage}", Severity.Error);
                        Console.WriteLine($"Unexpected error: {response.StatusCode} - {errorMessage}");
                    }
                }

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to submit employee info: {ex.Message}", Severity.Error);
            Console.WriteLine($"Failed to submit employee info: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }




    }



    private async Task UploadFiles(IBrowserFile file)
    {
        try
        {
            // Read the content of the file as a byte array
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream(5120000).CopyToAsync(memoryStream); //Maximum file size is 5 mb
                var bytes = memoryStream.ToArray();

                // Convert the byte array to a base64 string
                var base64String = Convert.ToBase64String(bytes);
                employeeInfo.Profile = base64String;
                // Construct the data URL
                employeeInfo.imageUrl = $"data:{file.ContentType};base64,{base64String}";
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Maximum image file size is 5 MB", MudBlazor.Severity.Success);
        }

    }

}
@page "/hr-requests"
@attribute [Authorize(Roles = "Human Resource")]
@using NCMS_wasm.Shared
<PageTitle>Requests | NCMS</PageTitle>

<MudStack>
    <MudText Typo="Typo.h5">Requests</MudText>
    <MudDataGrid Items="@leaveRequests" T="LeaveRequests" Loading="@isLoading" HeaderClass="mud-theme-default text-wrap" ShowMenuIcon="false"
                 HorizontalScrollbar="true"
                 ColumnResizeMode="ResizeMode.Column">
        <ToolBarContent>
            <MudButton Variant="Variant.Filled" Color="Color.Success" Class="my-2 mx-1" StartIcon="@Icons.Material.Filled.Refresh" OnClick="LoadEventsList">Refresh</MudButton>
            @* <MudButton Variant="Variant.Filled" Color="Color.Info" Class="my-2 mx-1" StartIcon="@Icons.Material.Filled.FamilyRestroom" OnClick="OpenAddGuestDialog">Add Guest</MudButton> *@
            <MudSpacer />
        </ToolBarContent>
        <Columns>
            <TemplateColumn Title="Action">
                <CellTemplate>
                    @if (context.Item.IsApproved == ApprovalType.ForApproval)
                    {
                        <MudTooltip Arrow="true" Text="Approve" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Filled.Check" Size="Size.Medium" OnClick="(() => UpdateRequests(context.Item,ApprovalType.Approved))" Variant="Variant.Filled" Color="Color.Success"></MudIconButton>
                        </MudTooltip>
                        <MudTooltip Arrow="true" Text="Reject" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Medium" OnClick="(() => UpdateRequests(context.Item,ApprovalType.Rejected))" Variant="Variant.Filled" Color="Color.Error"></MudIconButton>
                        </MudTooltip>
                    }
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Title="Name" Property="x => x.EventName" Filterable="true">
                <CellTemplate>
                    @context.Item.EventName.Split(" - ")[1]
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Title="Leave Type" Property="x => x.LeaveType.ToString()" Filterable="true" />
            <PropertyColumn Title="Status" Property="x => x.IsApproved" Filterable="true">
                <CellTemplate>
                    @if (context.Item.IsApproved == ApprovalType.Approved)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Success">Approved</MudChip>
                    }
                    else if (context.Item.IsApproved == ApprovalType.ForApproval)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Info">For Approval</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Error">Rejected</MudChip>
                    }
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Title="Duration" Property="x => x.EventStart" Filterable="false">
                <CellTemplate>
                    @($"{context.Item.EventStart:MM/dd/yyyy} - {context.Item.EventEnd:MM/dd/yyyy}")
                </CellTemplate>
            </PropertyColumn>
            <TemplateColumn Title="Created By">
                <CellTemplate>
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.caption" Class="fst-italic">@context.Item.EventName.Split(" - ")[1]</MudText>
                        <MudText Typo="Typo.caption" Class="fst-italic">@($"{context.Item.CreatedOn:MM/dd/yyyy}")</MudText>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Updated By">
                <CellTemplate>
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.caption" Class="fst-italic">@context.Item.UpdatedBy</MudText>
                        <MudText Typo="Typo.caption" Class="fst-italic">@($"{context.Item.UpdatedOn:MM/dd/yyyy}")</MudText>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <NoRecordsContent>
            <MudText>No Records to show</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading Content...</MudText>
        </LoadingContent>
    </MudDataGrid>
</MudStack>
@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; private set; }
    private List<LeaveRequests> leaveRequests = new List<LeaveRequests>();
    private bool isLoading = false;
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MainLayout.SubTitle = "HR Management Module";
        await LoadEventsList();
        await base.OnInitializedAsync();
    }

    private async Task UpdateRequests(LeaveRequests dto, ApprovalType status)
    {
        try
        {

            dto.IsApproved = status;
            dto.UpdatedBy = MainLayout.CurrentUserId;
            var response = await httpClient.PostAsJsonAsync("Events/ApprovalRequest", dto);
            response.EnsureSuccessStatusCode();
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                Snackbar.Add("Leave request updated", Severity.Success);
                await LoadEventsList();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to update leave request: {response.StatusCode} - {errorMessage}", Severity.Error);
                Console.WriteLine($"Failed to update leave request: {response.StatusCode} - {errorMessage}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception Occured: {ex.Message}");
        }
    }

    private async Task LoadEventsList()
    {

        try
        {
            isLoading = true;
            var filter = new EventFilter
                {
                    IsUser = false                   
                };
            var response = await httpClient.PostAsJsonAsync("Events/GetEvents", filter);
            if (response.IsSuccessStatusCode)
            {
                leaveRequests = await response.Content.ReadFromJsonAsync<List<LeaveRequests>>();
                if (leaveRequests != null)
                {

                    leaveRequests = leaveRequests
                        .Where(request => request.EventType == EventsType.Leave)
                        .OrderByDescending(request => request.CreatedOn)
                        .ToList();
                }
            }                        
        }
        catch (Exception ex)
        {
            isLoading = false;
            Snackbar.Add($"Exception Occured: {ex.Message}", Severity.Error);
            Console.WriteLine($"Exception Occured: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

}

@page "/hr-dashboard"
@attribute [Authorize(Roles = "Human Resource")]
@using NCMS_wasm.Shared
@using NCMS_wasm.Client.Pages.HR.Components
<PageTitle>Dashboard | NCMS</PageTitle>
<MudStack Class="w-100">
    <MudText Typo="Typo.h5">HR Dashboard</MudText>
    <MudCalendar HighlightToday                  
                 ShowWorkWeek="false"
                 ShowWeek="false"
                 ShowDay="false"
                 Elevation="1" 
                 ShowTodayButton = "false"
                 Style="width: 100%"
                 CellClicked="CellClicked" 
                 ItemClicked="ItemClicked"                 
                 MonthCellMinHeight="100"                 
                 Items="_events">
        <ToolbarContent>  
                <MudSpacer/>
                <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Warning" Size="Size.Small" /> Holiday</MudText>
                <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Success" Size="Size.Small" /> Approved Leave</MudText>
                <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Info" Size="Size.Small" /> For Approval Leave</MudText>            
        </ToolbarContent>
        <CellTemplate>
            <div style="background-color: @GetColor(((CustomItem)context).Color)" class="pa-2 d-flex gap-1">                
                <MudText Style="color: white" Class="fw-bold" Typo="Typo.body2">@context.Text</MudText>
             </div>            
        </CellTemplate>
    </MudCalendar>
    
</MudStack>
@code {
    [Inject] private IDialogService DialogService { get; set; }    

    private async Task CellClicked(DateTime dateTime)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackdropClick = true,
                CloseButton = true
            };
        var dialog = await DialogService.ShowAsync<AddEventDialog>("Simple Dialog", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            // await LoadCardsList();
            StateHasChanged();
        }
        // return DialogService.ShowMessageBox("No Events", dateTime.ToString(Thread.CurrentThread.CurrentCulture));
    }

    private Task ItemClicked(CalendarItem item)
    {                
        return DialogService.ShowMessageBox("Event", item.Text);
    }

    private string GetColor(Color color) => $"var(--mud-palette-{color.ToDescriptionString()})";

    private List<CustomItem> _events = new()
    {
        new CustomItem
        {
           Start = DateTime.ParseExact("2024/08/21", "yyyy/MM/dd", System.Globalization.CultureInfo.InvariantCulture),
            Text = "National Heroes Day",            
            Color = Color.Warning
        },
        new CustomItem
        {
             Start = DateTime.ParseExact("2024/08/06", "yyyy/MM/dd", System.Globalization.CultureInfo.InvariantCulture),
            End = DateTime.ParseExact("2024/08/07", "yyyy/MM/dd", System.Globalization.CultureInfo.InvariantCulture),
            Text = $"Carlo Boado - VL",            
            Color = Color.Info
        },
        new CustomItem
        {
             Start = DateTime.ParseExact("2024/08/04", "yyyy/MM/dd", System.Globalization.CultureInfo.InvariantCulture),
            End = DateTime.ParseExact("2024/08/04", "yyyy/MM/dd", System.Globalization.CultureInfo.InvariantCulture),
            Text = $"Carlo Boado - VL",
            Color = Color.Success
        }
    };

    private class CustomItem : CalendarItem
    {               
        public Color Color { get; set; } = Color.Primary;
    }    
}

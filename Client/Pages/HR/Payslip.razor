@page "/hr-payslips"
@attribute [Authorize(Roles = "Human Resource")]
@using NCMS_wasm.Shared
<PageTitle>Payslips | NCMS</PageTitle>

<MudTabs Elevation="4" Rounded="true" Border="true" Color="Color.Info" Class="w-100 vh-100 pt-5">
    <MudTabPanel Text="Payslip Upload">
        <MudStack>
            <MudText Typo="Typo.h5">Payslip Upload Facility</MudText>
            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">Download the template to fill payslip for employees. Click <MudLink OnClick="@(() => OnDownloadTemplate())" Underline="Underline.Always">here</MudLink></MudAlert>
            <MudStack>
                <MudDataGrid Items="@payslipUploads" T="PayslipUpload" Loading="@isLoading" HeaderClass="mud-theme-default text-wrap" ShowMenuIcon="false"
                             HorizontalScrollbar="true"
                             ColumnResizeMode="ResizeMode.Container">
                    <ToolBarContent>
                        <MudButton Variant="Variant.Filled" Color="Color.Success" Class="my-2 mx-1" StartIcon="@Icons.Material.Filled.Refresh" OnClick="LoadFileUploads">Refresh</MudButton>
                        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".xlsx">
                            <ActivatorContent>
                                <MudLoadingButton Variant="Variant.Filled"
                                                  Color="Color.Primary"
                                                  Size="Size.Medium"
                                                  StartIcon="@Icons.Material.Filled.CloudUpload"
                                                  Loading="@(uploading)"
                                                  ButtonType="ButtonType.Button">
                                    <LoadingContent>Uploading...</LoadingContent>
                                    <ChildContent>Upload Payslip</ChildContent>
                                </MudLoadingButton>
                            </ActivatorContent>
                        </MudFileUpload>


                        <MudSpacer />
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Title="File Name" Property="x => x.FileName" Filterable="true" />
                        <PropertyColumn Title="Status" Property="x => x.PayslipFileStatus" Filterable="true">
                            <CellTemplate>
                                @if (context.Item.PayslipFileStatus == PayslipFileStatus.Success)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Success">Success</MudChip>
                                }
                                else if (context.Item.PayslipFileStatus == PayslipFileStatus.Processing)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Info">Processing</MudChip>
                                }
                                else if (context.Item.PayslipFileStatus == PayslipFileStatus.OnQueue)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Default">On Queue</MudChip>
                                }
                                else
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Error">Failed</MudChip>
                                }
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Title="Uploaded On" Property="x => x.UploadedOn" Filterable="false" />
                    </Columns>
                    <NoRecordsContent>
                        <MudText>No Records to show</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>Loading Content...</MudText>
                    </LoadingContent>
                </MudDataGrid>
            </MudStack>
        </MudStack>
    </MudTabPanel>
    <MudTabPanel Text="DTR">
        <MudStack>
            <MudText Typo="Typo.h5" Class="pt-3">Daily Time Records</MudText>
            <MudDataGrid T="DTRModel" Items="@dtr" SortMode="SortMode.Multiple" HorizontalScrollbar Filterable="true" Loading="isLoading" ColumnResizeMode="ResizeMode.Column"
                         Hideable="true">
                <ToolBarContent>
                    <MudLoadingButton Variant="Variant.Filled"
                                      Class="my-2 mx-1"
                                      Color="Color.Info"
                                      Size="Size.Medium"
                                      OnClick="OnGenerateDTR"
                                      Loading="@(_loading)"
                                      StartIcon="@Icons.Material.Filled.AssignmentReturned"
                                      ButtonType="ButtonType.Button">
                        <LoadingContent>Generating...</LoadingContent>
                        <ChildContent>Generate DTR</ChildContent>
                    </MudLoadingButton>
                    <MudSelect @bind-Value="selectedCutOff" Label="Cut Off Date" FullWidth="false" Margin="Margin.Dense" Variant="Variant.Outlined">
                        @foreach (var item in groupedCutOffDates)
                        {
                            <MudSelectItem Value="@item" />
                        }
                    </MudSelect>
                    @if (isIndividual)
                    {
                        <MudSelect @bind-Value="selectedEmployeeId" Disabled="@(selectedCutOff != null? false: true)" Label="Employee Name" Class="px-1" FullWidth="false" Margin="Margin.Dense" Variant="Variant.Outlined">
                            @foreach (var item in selectedEmployee)
                            {
                                <MudSelectItem Value="@item.employeeId">@item.employeeName</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    <MudCheckBox @bind-Value="isIndividual">Individual DTR</MudCheckBox>
                    <MudSpacer />
                    <MudButton Variant="Variant.Filled" Color="Color.Success" Class="my-2 mx-1" StartIcon="@Icons.Material.Filled.Refresh" OnClick="LoadDTRHistory">Refresh</MudButton>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.IDNumber" Title="Employee ID" HeaderClass="text-nowrap" HeaderStyle="background-color: #1abc9c; color: white;" />
                    <PropertyColumn Property="x => x.Name" Title="Employee Name" HeaderClass="text-nowrap" HeaderStyle="background-color: #1abc9c; color: white;" />
                    <PropertyColumn Property="x => x.CutOffDate" Title="Cut Off Date" HeaderClass="text-nowrap" HeaderStyle="background-color: #1abc9c; color: white;" />
                    <PropertyColumn Property="x => x.ShiftDate" Title="Shift Date" HeaderClass="text-nowrap" HeaderStyle="background-color: #1abc9c; color: white;">
                        <CellTemplate>
                            @context.Item.ShiftDate?.ToString("MM/dd/yyyy")
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.TimeIn" Title="Time In" HeaderStyle="background-color: #1abc9c; color: white;">
                        <CellTemplate>
                            @context.Item.TimeIn?.ToString("t")
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.TimeOut" Title="Time In" HeaderStyle="background-color: #1abc9c; color: white;">
                        <CellTemplate>
                            @context.Item.TimeOut?.ToString("t")
                        </CellTemplate>
                    </PropertyColumn>
                </Columns>
                <NoRecordsContent>
                    <MudText>No Records to show</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading Data...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudDataGridPager T="DTRModel" />
                </PagerContent>
            </MudDataGrid>
        </MudStack>

        <MudStack>
            <MudText Typo="Typo.h5" Class="pt-3">DTR Requests</MudText>
            <MudDataGrid T="GeneratedDTR" Items="@dtrRequests" SortMode="SortMode.Multiple" HorizontalScrollbar Filterable="true" Loading="isLoading" ColumnResizeMode="ResizeMode.Column"
                         Hideable="true">
                <ToolBarContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" Class="my-2 mx-1" StartIcon="@Icons.Material.Filled.Refresh" OnClick="LoadDTRRequests">Refresh</MudButton>
                    <MudSpacer />
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.TaskId" Title="Task ID" HeaderClass="text-nowrap" HeaderStyle="background-color: #1abc9c; color: white;" />
                    <PropertyColumn Property="x => x.TaskName" Title="Name" HeaderClass="text-nowrap" HeaderStyle="background-color: #1abc9c; color: white;">
                        <CellTemplate>
                            @if (context.Item.Status == DTRStatus.Processed)
                            {
                                <MudLink OnClick="@(async() => await OnDownloadDTRRequest(context.Item.TaskName))" Typo="Typo.body2">@context.Item.TaskName</MudLink>
                            }
                            else
                            {
                                @context.Item.TaskName
                            }
                        </CellTemplate>
                        </PropertyColumn>
                    <PropertyColumn Property="x => x.TaskType" Title="Type" HeaderClass="text-nowrap" HeaderStyle="background-color: #1abc9c; color: white;" />
                    <PropertyColumn Property="x => x.Status" Title="Status" HeaderClass="text-nowrap" HeaderStyle="background-color: #1abc9c; color: white;">
                        <CellTemplate>
                            @if (context.Item.Status == DTRStatus.Processed)
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Success">Success</MudChip>
                            }
                            else if (context.Item.Status == DTRStatus.Processing)
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Info">Processing</MudChip>
                            }
                            else if (context.Item.Status == DTRStatus.On_Queue)
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Default">On Queue</MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Error">Failed</MudChip>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.CreatedOn" Title="Created On" HeaderClass="text-nowrap" HeaderStyle="background-color: #1abc9c; color: white;" />
                    <PropertyColumn Property="x => x.UpdatedOn" Title="Updated On" HeaderClass="text-nowrap" HeaderStyle="background-color: #1abc9c; color: white;" />

                </Columns>
                <NoRecordsContent>
                    <MudText>No Records to show</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading Data...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudDataGridPager T="GeneratedDTR" />
                </PagerContent>
            </MudDataGrid>
        </MudStack>
    </MudTabPanel>
</MudTabs>



@code {
    [Inject] NavigationManager navigationManager { get; set; }
    [Inject] HttpClient httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    private string BaseUrl = String.Empty;
    private bool isLoading = false;
    private List<PayslipUpload> payslipUploads = new List<PayslipUpload>();
    private List<DTRModel> dtr = new List<DTRModel>();
    private bool uploading = false;
    private bool _loading = false;
    private List<string> groupedCutOffDates = new List<string>();
    private List<IndividualEmployee> selectedEmployee = new List<IndividualEmployee>();
    private string? selectedCutOff;
    private string? selectedEmployeeId;
    private bool isIndividual = false;
    private List<GeneratedDTR> dtrRequests = new();
    private string? DTRBaseUri;

    protected override async Task OnInitializedAsync()
    {
        BaseUrl = $"{navigationManager.BaseUri}Templates/PayslipTemplate.xlsx";
        await LoadFileUploads();
        await LoadDTRHistory();
        await LoadDTRRequests();
        await base.OnInitializedAsync();
    }
    private async Task OnDownloadTemplate()
    {
        await JSRuntime.InvokeVoidAsync("downloadFile", BaseUrl, "PayslipTemplate.xlsx");
    }

    private async Task OnDownloadDTRRequest(string file)
    {
        BaseUrl = $"{navigationManager.BaseUri}DTR/Payslip/Success/{file}.xlsx";

        await JSRuntime.InvokeVoidAsync("downloadFile", BaseUrl, $"{file}.xlsx");
    }

    private async Task LoadFileUploads()
    {
        try
        {
            isLoading = true;

            var response = await httpClient.PostAsJsonAsync("Payslip/GetPayslipsUploads", "");

            if (response.IsSuccessStatusCode)
            {
                payslipUploads = await response.Content.ReadFromJsonAsync<List<PayslipUpload>>();
            }
        }
        catch (Exception ex)
        {

            Snackbar.Add($"Exception Occured: {ex.Message}", Severity.Error);
            Console.WriteLine($"Exception Occured: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadDTRHistory()
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync("Employee/GetEmployeeRFIDInfoAll", new DTRModel());

            if (response.IsSuccessStatusCode)
            {
                var employee = await response.Content.ReadFromJsonAsync<List<DTRModel>>();
                dtr.Clear();
                if (employee is not null)
                {
                    dtr = employee;
                    groupedCutOffDates = dtr.GroupBy(d => d.CutOffDate).Select(g => g.Key).ToList();
                    selectedEmployee = dtr.GroupBy(d => d.IDNumber).Select(g => new IndividualEmployee
                        {
                            employeeId = g.FirstOrDefault()?.IDNumber,
                            employeeName = g.FirstOrDefault()?.Name
                        }).ToList();

                }
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"An error occured: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }
        finally
        {

        }
    }

    private async Task OnGenerateDTR()
    {
        try
        {
            isLoading = true;
            if (selectedCutOff != null)
            {
                if (isIndividual)
                {
                    if (selectedEmployeeId != null)
                    {
                        //Generate Individual DTR
                        var payload = new GenerateDTRRequest
                            {
                                EmployeeId = selectedEmployeeId,
                                CutOffDate = selectedCutOff,
                                DTRType = "Individual"
                            };
                        var response = await httpClient.PostAsJsonAsync("Employee/GenerateDTRRequest", payload);

                        if (response.IsSuccessStatusCode)
                        {
                            await LoadDTRRequests();
                            Snackbar.Add("Individual DTR Request added On-Queue", Severity.Success);
                        }
                        else
                        {
                            var errorMessage = await response.Content.ReadAsStringAsync();
                            Snackbar.Add($"An error Occured: {errorMessage}", Severity.Error);
                        }
                    }
                    else
                    {
                        Snackbar.Add("Please select Employee", Severity.Error);
                    }
                }
                else
                {
                    //Generate All DTR
                    var payload = new GenerateDTRRequest
                        {                            
                            CutOffDate = selectedCutOff,
                            DTRType = "All"
                        };
                    var response = await httpClient.PostAsJsonAsync("Employee/GenerateDTRRequest", payload);

                    if (response.IsSuccessStatusCode)
                    {
                        await LoadDTRRequests();
                        Snackbar.Add("DTR Request added On-Queue", Severity.Success);
                    }
                    else
                    {
                        var errorMessage = await response.Content.ReadAsStringAsync();
                        Snackbar.Add($"An error Occured: {errorMessage}", Severity.Error);
                    }


                }
            }
            else
            {
                Snackbar.Add("Please select a Cut Off Date", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occured: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadDTRRequests()
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync("Employee/GetDTRRequests", new GeneratedDTR());

            if (response.IsSuccessStatusCode)
            {
                var generatedDTRRequests = await response.Content.ReadFromJsonAsync<List<GeneratedDTR>>();
                dtrRequests = generatedDTRRequests;
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"An error Occured: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error Occured: {ex.Message}", Severity.Error);
        }
    }


    private async Task UploadFiles(IBrowserFile file)
    {
        uploading = true;

        try
        {
            // Check file type and size
            if (file.ContentType != "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            {
                Snackbar.Add("Invalid file format. Only Excel files are allowed.", Severity.Error);
                uploading = false;
                return;
            }

            var content = new MultipartFormDataContent();
            var fileStream = file.OpenReadStream(10 * 1024 * 1024); // Limit to 10 MB
            var streamContent = new StreamContent(fileStream);
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

            // Add the file to the form data
            content.Add(streamContent, "file", file.Name);

            // Send file to the server
            var response = await httpClient.PostAsync("Payslip/UploadPayslipFile", content);

            if (response.IsSuccessStatusCode)
            {
                await LoadFileUploads();
                Snackbar.Add("File uploaded successfully.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Error uploading file: {response.ReasonPhrase}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error uploading file: {ex.Message}", Severity.Error);
        }
        finally
        {
            uploading = false;
        }
    }

    public class IndividualEmployee
    {
        public string? employeeId { get; set; }
        public string? employeeName { get; set; }
    }


}

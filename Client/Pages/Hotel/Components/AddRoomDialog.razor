@using NCMS_wasm.Shared
@using NCMS_wasm.Client.Pages.Validations
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="fas fa-hotel"></MudIcon>
            Add Room
        </MudText>
    </TitleContent>
    <DialogContent>
        @* <MudForm @ref="form" Model="@rfidInfo" Validation="@(modelValidator.ValidateValue)" ValidationDelay="0"> *@
        <MudForm @ref="form" Model="@rooms">
            <MudTextField @bind-Value="rooms.RoomNumber" Label="Room Number" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            <MudTextField @bind-Value="rooms.RoomDescription" Label="Room Description" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            <MudNumericField Class="py-1" @bind-Value="rooms.PricePerNight" Label="Price Per Night" Variant="Variant.Outlined" HideSpinButtons Min="1" Margin="Margin.Dense" />
            <MudSelect T="RoomType" Label="Room Type" @bind-Value="rooms.Type" Variant="Variant.Outlined"
                       AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense">
                <MudSelectItem Value="@RoomType.Twin" />
                <MudSelectItem Value="@RoomType.Double_Twin" />
                <MudSelectItem Value="@RoomType.Triple" />
                <MudSelectItem Value="@RoomType.Deluxe_Double" />
                <MudSelectItem Value="@RoomType.Superior_Queen" />
                <MudSelectItem Value="@RoomType.Suite" />
                <MudSelectItem Value="@RoomType.King_Suite" />
            </MudSelect>
            <MudNumericField Class="py-1" @bind-Value="rooms.MaxGuest" Label="Max Guest" Variant="Variant.Outlined" HideSpinButtons Min="1" Max="99" Margin="Margin.Dense" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudLoadingButton Variant="Variant.Filled"
                          Color="Color.Success"
                          Size="Size.Large"
                          OnClick="OnSubmit"
                          Loading="@(_loading)"
                          ButtonType="ButtonType.Button">
            <LoadingContent>Submitting...</LoadingContent>
            <ChildContent>Submit</ChildContent>
        </MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    MudForm form;
    private HotelRoom rooms { get; set; }
    private bool _loading = false;
    private IEnumerable<RoomType> roomType { get; set; } = new HashSet<RoomType>();
    private List<HotelRoom> roomsList = new List<HotelRoom>();

    private async Task OnSubmit()
    {
        _loading = true;
        try
        {
            rooms.IsAvailable = true;
            rooms.Status = RoomStatus.Available;
            rooms.CreatedBy = "Test";
            rooms.CreatedOn = DateTime.Now;
            rooms.UpdatedBy = "Test";
            rooms.UpdatedOn = DateTime.Now;
            var response = await httpClient.PostAsJsonAsync("HotelManagement/AddRooms", rooms);
            response.EnsureSuccessStatusCode();
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                Snackbar.Add("Room has been created.", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to save room info: {response.StatusCode} - {errorMessage}", Severity.Error);
                Console.WriteLine($"Failed to save room info: {response.StatusCode} - {errorMessage}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception Occured: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
        

    }

    protected override async Task OnInitializedAsync()
    {
        rooms = new HotelRoom();
        await base.OnInitializedAsync();
    }





    void Cancel() => MudDialog.Cancel();
}

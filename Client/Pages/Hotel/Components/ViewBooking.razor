@using NCMS_wasm.Shared
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="fas fa-calendar-week"></MudIcon>
           <strong>@guestsInfo.BookingNo - Room @guestsInfo.RoomNumber</strong>
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudStack Class="w-100" Spacing="0">
            <MudText Typo="Typo.body1">Name: <strong>@($"{ToSentenceCase(guestsInfo.FirstName)} {ToSentenceCase(guestsInfo.MiddleName)} {ToSentenceCase(guestsInfo.LastName)}")</strong></MudText>
            <MudText Typo="Typo.body1">Check In: <strong>@guestsInfo.CheckInDate</strong></MudText>
            <MudText Typo="Typo.body1">Check Out: <strong>@guestsInfo.CheckOutDate</strong></MudText>            
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>

        @if(guestsInfo.BookingType == BookingType.Reservation)
        {
            <MudLoadingButton Variant="Variant.Filled"
                              Color="Color.Error"
                              Size="Size.Large"
                              Disabled="@isEnabled"
                              OnClick="OnSubmitCancel"
                              Loading="@(_loading)"
                              ButtonType="ButtonType.Button">
                <LoadingContent>Updating...</LoadingContent>
                <ChildContent>Cancel Reservation</ChildContent>
            </MudLoadingButton>
            <MudLoadingButton Variant="Variant.Filled"
                              Color="Color.Success"
                              Size="Size.Large"
                              Disabled="@isEnabled"
                              OnClick="OnSubmitReservation"
                              Loading="@(_loading)"
                              ButtonType="ButtonType.Button">
                <LoadingContent>Updating...</LoadingContent>
                <ChildContent>Check In</ChildContent>
            </MudLoadingButton>
        }
        @if (guestsInfo.BookingType == BookingType.Walkin_Booking || guestsInfo.BookingType == BookingType.Booked)
        {
            <MudLoadingButton Variant="Variant.Filled"
                              Color="Color.Success"
                              Size="Size.Large"
                              Disabled="@isEnabled"
                              OnClick="OnSubmit"
                              Loading="@(_loading)"
                              ButtonType="ButtonType.Button">
                <LoadingContent>Updating...</LoadingContent>
                <ChildContent>Check Out</ChildContent>
            </MudLoadingButton>
        }

        
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Parameter] public GuestsInfo guestsInfo { get; set; }
    [Parameter] public bool isEnabled {get;set;}
    [Parameter] public string currentUserId { get; set; }
    private bool _loading = false;

    private async Task OnSubmit()
    {
        try
        {
            _loading = true;

            guestsInfo.BookingType = BookingType.Checked_Out;
            guestsInfo.UpdatedBy = currentUserId;

            var response = await httpClient.PostAsJsonAsync("HotelManagement/UpdateBookingStatus", guestsInfo);
            response.EnsureSuccessStatusCode();
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Booking has been updated.{result}", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to update booking info: {response.StatusCode} - {errorMessage}", Severity.Error);
                Console.WriteLine($"Failed to update booking info: {response.StatusCode} - {errorMessage}");
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occured: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnSubmitReservation()
    {
        try
        {
            _loading = true;

            guestsInfo.BookingType = BookingType.Booked;
            guestsInfo.UpdatedBy = currentUserId;

            // var response = await httpClient.PostAsJsonAsync("HotelManagement/UpdateBookingStatus", guestsInfo);
            // response.EnsureSuccessStatusCode();
            // if (response.IsSuccessStatusCode)
            // {
            //     var result = await response.Content.ReadAsStringAsync();
            //     Snackbar.Add($"Booking has been updated.{result}", Severity.Success);
            //     MudDialog.Close(DialogResult.Ok(true));
            // }
            // else
            // {
            //     var errorMessage = await response.Content.ReadAsStringAsync();
            //     Snackbar.Add($"Failed to update booking info: {response.StatusCode} - {errorMessage}", Severity.Error);
            //     Console.WriteLine($"Failed to update booking info: {response.StatusCode} - {errorMessage}");
            // }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occured: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnSubmitCancel()
    {
        try
        {
            _loading = true;

            guestsInfo.BookingType = BookingType.Cancelled;
            guestsInfo.UpdatedBy = currentUserId;

            var response = await httpClient.PostAsJsonAsync("HotelManagement/UpdateBookingStatus", guestsInfo);
            response.EnsureSuccessStatusCode();
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Booking has been updated.{result}", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to update booking info: {response.StatusCode} - {errorMessage}", Severity.Error);
                Console.WriteLine($"Failed to update booking info: {response.StatusCode} - {errorMessage}");
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occured: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private string ToSentenceCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return input;

        return char.ToUpper(input[0]) + input.Substring(1).ToLower();
    }


    void Cancel() => MudDialog.Cancel();
}

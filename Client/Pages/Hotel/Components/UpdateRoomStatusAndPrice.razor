@using NCMS_wasm.Shared

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="fas fa-hotel"></MudIcon>
            Update Room Status and Price
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudStack Class="w-100" Spacing="2" >
            <MudText Typo="Typo.body1">Room Number: <strong>@roomInfo.RoomNumber</strong></MudText>
            <MudNumericField @bind-Value="roomInfo.PricePerNight" Label="Price Per Night" Variant="Variant.Outlined" HideSpinButtons Min="1" Margin="Margin.Dense" />
            <MudSelect T="RoomStatus" Label="Room Type" @bind-Value="roomInfo.Status" Variant="Variant.Outlined"
                       AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense">
                @foreach (var type in Enum.GetValues(typeof(RoomStatus)).Cast<RoomStatus>())
                {
                    <MudSelectItem Disabled="@(type==RoomStatus.Available||type==RoomStatus.Not_Available?false:true)" Value="type">@type.ToString().Replace("_", " ")</MudSelectItem>
                }
            </MudSelect>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudLoadingButton Variant="Variant.Filled"
                          Color="Color.Success"
                          Size="Size.Large"
                          OnClick="OnSubmit"
                          Loading="@(_loading)"
                          ButtonType="ButtonType.Button">
            <LoadingContent>Submitting...</LoadingContent>
            <ChildContent>Submit</ChildContent>
        </MudLoadingButton>
    </DialogActions>
</MudDialog>

@code{
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter]
    public string userId { get; set; }
    [Parameter] public RoomInfo roomInfo { get; set; }
    [Inject] ISnackbar Snackbar{ get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    private bool _loading = false;
    void Cancel() => MudDialog.Cancel();

    private async Task OnSubmit()
    {
        _loading = true;
        try
        {
            
            roomInfo.UpdatedBy = userId;
          


            var response = await httpClient.PostAsJsonAsync("HotelManagement/UpdatedPriceAndStatus", roomInfo);
            response.EnsureSuccessStatusCode();
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                Snackbar.Add("Room info updated.", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to update room info: {response.StatusCode} - {errorMessage}", Severity.Error);
                Console.WriteLine($"Failed to updated room info: {response.StatusCode} - {errorMessage}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception Occured: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }
}
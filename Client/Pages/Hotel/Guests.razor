@page "/hotel-Booking"
@attribute [Authorize(Roles = "Front Desk")]
@using NCMS_wasm.Shared
@using NCMS_wasm.Client.Pages.Hotel.Components
<PageTitle>Guest Management | NCMS</PageTitle>
<MudStack Spacing="2" Class="w-100 pt-5">
    <MudGrid Justify="Justify.Center" Class="w-100">
        <MudItem lg="12" xl="12" xs="12" sm="12" Class="w-100">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Color="Color.Dark">
                <MudTabPanel Text="Calendar" Icon="@Icons.Material.Filled.CalendarMonth">
                    <MudOverlay @bind-Visible="isLoadingCalendar" DarkBackground AutoClose="false">
                        <MudLoading @bind-Loading="isLoadingCalendar" Overlap="false" LoaderType="LoaderType.Circular" Darken="true"
                                    Color="Color.Primary" />
                    </MudOverlay>
                    <MudCalendar HighlightToday
                                 ShowWorkWeek="false"
                                 ShowWeek="false"
                                 ShowDay="false"
                                 Elevation="1"
                                 ShowTodayButton="true"
                                 Style="width: 100%"
                                 CellClicked="CellClicked"
                                 ItemClicked="ItemClicked"
                                 MonthCellMinHeight="50"
                                 Items="_events">
                        <ToolbarContent>
                            <MudSpacer />
                            <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Success" Size="Size.Small" /> Booked</MudText>
                            <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Info" Size="Size.Small" /> Reservation</MudText>
                            <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Error" Size="Size.Small" /> Cancelled</MudText>
                        </ToolbarContent>
                        <CellTemplate>
                            <div style="background-color: @GetColor(((CustomItem)context).Color); border-top: 2px solid black;" class="pa-2 d-flex gap-1">
                                <MudText Style="color: white" Class="fw-bold" Typo="Typo.body2">@context.Text</MudText>
                            </div>
                        </CellTemplate>
                    </MudCalendar>
                </MudTabPanel>
                <MudTabPanel Text="List" Icon="@Icons.Material.Filled.ListAlt">
                    <MudDataGrid Items="@guestsList" T="GuestsInfo" Loading="@isLoading" Hover Striped Dense Class="w-100" QuickFilter="_quickFilter"
                                 HeaderClass="w-100" HorizontalScrollbar="true" Filterable="false"
                                 ColumnResizeMode="ResizeMode.Container">
                        <ToolBarContent>
                            <MudTextField Variant="Variant.Outlined" @bind-Value="searchQuery" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Margin="Margin.Dense" />
                            <MudButton Variant="Variant.Filled" Color="Color.Success" Class="my-2 mx-1" StartIcon="@Icons.Material.Filled.Refresh" OnClick="LoadGuestsList">Refresh</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Info" Class="my-2 mx-1" StartIcon="@Icons.Material.Filled.FamilyRestroom" OnClick="OpenAddGuestDialog">Add Guest</MudButton>
                            <MudSpacer />
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="x => x.BookingNo" Title="Booking No" HeaderStyle="background-color: #1abc9c; color: white;" />
                            <PropertyColumn Property="x => x.FirstName" Title="Name" HeaderStyle="background-color: #1abc9c; color: white;">
                                <CellTemplate>
                                    <MudText Typo="Typo.body1">@($"{ToSentenceCase(context.Item.FirstName)} {ToSentenceCase(context.Item.MiddleName)} {ToSentenceCase(context.Item.LastName)}")   </MudText>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.BookingType" Title="Booking Type" HeaderStyle="background-color: #1abc9c; color: white;">
                                <CellTemplate>
                                    @switch (context.Item.BookingType)
                                    {
                                        case BookingType.Walkin_Booking:
                                            <MudChip T="string" Size="Size.Small" Color="Color.Success">@BookingType.Walkin_Booking.ToString().Replace("_", " ")</MudChip>
                                            break;

                                        case BookingType.Booked:
                                            <MudChip T="string" Size="Size.Small" Color="Color.Success">@BookingType.Booked.ToString().Replace("_", " ")</MudChip>
                                            break;

                                        case BookingType.Reservation:
                                            <MudChip T="string" Size="Size.Small" Color="Color.Info">@BookingType.Reservation.ToString().Replace("_", " ")</MudChip>
                                            break;

                                        case BookingType.Cancelled:
                                            <MudChip T="string" Size="Size.Small" Color="Color.Error">@BookingType.Cancelled.ToString().Replace("_", " ")</MudChip>
                                            break;
                                        case BookingType.Checked_Out:
                                            <MudChip T="string" Size="Size.Small" Color="Color.Warning">@BookingType.Checked_Out.ToString().Replace("_", " ")</MudChip>
                                            break;
                                    }
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.ArrivalDate" Title="Arrival Date" HeaderStyle="background-color: #1abc9c; color: white;" />
                            <PropertyColumn Property="x => x.CheckInDate" Title="Check In Date" HeaderStyle="background-color: #1abc9c; color: white;" />
                            <PropertyColumn Property="x => x.CheckOutDate" Title="Check Out Date" HeaderStyle="background-color: #1abc9c; color: white;" />
                            <PropertyColumn Property="x => x.Email" HeaderStyle="background-color: #1abc9c; color: white;" />
                            <PropertyColumn Property="x => x.Phone" Title="Phone Number" HeaderStyle="background-color: #1abc9c; color: white;" />
                            <TemplateColumn Title="Created By" HeaderStyle="background-color: #1abc9c; color: white;">
                                <CellTemplate>
                                    <MudStack Spacing="0">
                                        <MudText Typo="Typo.subtitle1">@context.Item.CreatedBy</MudText>
                                        <MudText Typo="Typo.subtitle2" Class="text-muted">@context.Item.CreatedOn</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>
                            <TemplateColumn Title="Updated By" HeaderStyle="background-color: #1abc9c; color: white;">
                                <CellTemplate>
                                    <MudStack Spacing="0">
                                        <MudText Typo="Typo.subtitle1">@context.Item.UpdatedBy</MudText>
                                        <MudText Typo="Typo.subtitle2" Class="text-muted">@context.Item.UpdatedOn</MudText>
                                    </MudStack>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <NoRecordsContent>
                            <MudText>No Records to show</MudText>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudText>Loading Content...</MudText>
                        </LoadingContent>
                        <PagerContent>
                            <MudDataGridPager T="GuestsInfo" />
                        </PagerContent>
                    </MudDataGrid>
                </MudTabPanel>

            </MudTabs>




        </MudItem>
    </MudGrid>

</MudStack>
@code {
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] IDialogService? DialogService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    private List<GuestsInfo> guestsList = new List<GuestsInfo>();
    private bool isLoading = false;
    [CascadingParameter]
    public MainLayout MainLayout { get; private set; }
    private bool isLoadingCalendar = false;
    private List<CustomItem> _events = new();
    private string? searchQuery;
    protected override async Task OnInitializedAsync()
    {

        MainLayout.SubTitle = "Hotel Management Module";
        await LoadGuestsList();
        await base.OnInitializedAsync();
    }

    private async Task OpenAddGuestDialog()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackdropClick = false,
                CloseButton = true
            };
        var parameters = new DialogParameters<AddGuestDialog>
        {
            {x => x.userId, MainLayout.CurrentUserId},
            {x => x.bookingInfo, new Booking() },
            {x => x.dateFrom, new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 14, 0, 0)}
        };
        var dialog = await DialogService.ShowAsync<AddGuestDialog>("Simple Dialog", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            // await LoadCardsList();
            StateHasChanged();
        }
    }


    private Func<GuestsInfo, bool> _quickFilter => x =>
        {
            if (string.IsNullOrWhiteSpace(searchQuery))
                return true;

            if (x.BookingNo.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                return true;

            if (x.FirstName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                return true;
            if (x.MiddleName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                return true;
            if (x.LastName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        };





    private async Task CellClicked(DateTime dateTime)
    {

        if (DateTime.Today > dateTime)
        {
            Snackbar.Add("Invalid Action, Date is behind.", Severity.Warning);
        }
        else
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = true,
                    CloseButton = true
                };
            var parameters = new DialogParameters<AddGuestDialog>
        {
            {x => x.userId, MainLayout.CurrentUserId},
            {x => x.bookingInfo, new Booking()},
            {x => x.dateFrom, new DateTime(dateTime.Year,dateTime.Month, dateTime.Day, 14, 0, 0)}
        };
            var dialog = await DialogService.ShowAsync<AddGuestDialog>("Simple Dialog", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadGuestsList();
                StateHasChanged();
            }
        }
    }

    private async Task ItemClicked(CalendarItem item)
    {
        bool isEnabled = true;
        if (item is CustomItem customItem)
        {
            if (customItem.Type == BookingType.Walkin_Booking || customItem.Type == BookingType.Booked || customItem.Type == BookingType.Reservation)
            {
                isEnabled = false;
            }
            else
            {
                isEnabled = true;
            }

            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small,
                    BackdropClick = true,
                    CloseButton = true
                };
            var guests = new GuestsInfo
                {
                    Id = customItem.Id,
                    RoomNumber = customItem.Text,
                    CheckInDate = customItem.Start,
                    CheckOutDate = customItem.End,
                    BookingNo = customItem.BookingNo,
                    FirstName = customItem.FirstName,
                    MiddleName = customItem.MiddleName,
                    LastName = customItem.LastName

                };
            var parameters = new DialogParameters<ViewBooking>
        {
            {x=>x.isEnabled,isEnabled},
            {x=>x.currentUserId,MainLayout.CurrentUserId},
            {x=>x.guestsInfo,guests}
        };
            var dialog = await DialogService.ShowAsync<ViewBooking>("Simple Dialog", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadGuestsList();
                StateHasChanged();
            }
        }
    }

    private async Task LoadGuestsList()
    {

        try
        {
            isLoadingCalendar = true;
            guestsList = await httpClient.GetFromJsonAsync<List<GuestsInfo>>($"HotelManagement/GetCalendarDisplay");
            _events.Clear();
            foreach (var item in guestsList)
            {
                Color color = Color.Default;
                switch (item.BookingType)
                {
                    case BookingType.Cancelled:
                        color = Color.Error;
                        break;
                    case BookingType.Booked:
                    case BookingType.Walkin_Booking:
                        color = Color.Success;
                        break;
                    case BookingType.Reservation:
                        color = Color.Info;
                        break;
                }

                var customItem = new CustomItem
                    {
                        Id = item.Id,
                        BookingNo = item.BookingNo,
                        FirstName = item.FirstName,
                        MiddleName = item.MiddleName,
                        LastName = item.LastName,
                        Start = item.CheckInDate ?? DateTime.Now,
                        End = item.CheckOutDate ?? DateTime.Now,
                        Text = item.RoomNumber,
                        Color = color,
                        Type = item.BookingType
                    };
                if (item.BookingType != BookingType.Checked_Out)
                {
                    _events.Add(customItem);
                }

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occured: {ex.Message}");
        }
        finally
        {
            isLoadingCalendar = false;
        }

    }



    private string ToSentenceCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return input;

        return char.ToUpper(input[0]) + input.Substring(1).ToLower();
    }

    private class CustomItem : CalendarItem
    {
        public string? Id { get; set; }
        public string? BookingNo { get; set; }
        public string? FirstName { get; set; }
        public string? MiddleName { get; set; }
        public string? LastName { get; set; }
        public Color Color { get; set; } = Color.Info;
        public BookingType Type { get; set; } = BookingType.Reservation;

    }
    private string GetColor(Color color) => $"var(--mud-palette-{color.ToDescriptionString()})";
}

@using NCMS_wasm.Shared
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="fas fa-vote-yea"></MudIcon>
            Add Leave Request
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="@events">
            @* <MudTextField @bind-Value="events.EventName" Label="Holiday Description" ShrinkLabel Variant="Variant.Outlined"></MudTextField> *@
            <MudSelect T="LeaveType" @bind-Value="events.LeaveType" Label="Leave Type" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@(LeaveType.Vacation)" />
                <MudSelectItem Value="@(LeaveType.Sick)" />
            </MudSelect>
            <MudStack Row>
                <MudDatePicker Label="From Date" @bind-Date="StartDate" />
                <MudDatePicker Label="To Date" @bind-Date="EndDate" />
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudLoadingButton Variant="Variant.Filled"
                          Color="Color.Success"
                          Size="Size.Large"
                          Loading="@(_loading)"
                          OnClick="OnSubmit"
                          ButtonType="ButtonType.Button">
            <LoadingContent>Submitting...</LoadingContent>
            <ChildContent>Submit</ChildContent>
        </MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm form;
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Parameter] public DateTime? StartDate { get; set; }
    [Parameter] public DateTime? EndDate { get; set; }  
    [Parameter] public string? EmployeeId { get; set; }    
    private LeaveRequests? events { get; set; }
    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        events = new LeaveRequests();
        events.EventStart = StartDate ?? DateTime.Today;
        events.EventEnd = EndDate ?? DateTime.Today;
        await base.OnInitializedAsync();
    }

    void Cancel() => MudDialog.Cancel();


    private async Task OnSubmit()
    {
        _loading = true;
        try
        {
            events.EventStart = StartDate ?? DateTime.Today;
            events.EventEnd = EndDate ?? DateTime.Today;
            events.IsApproved = ApprovalType.ForApproval;
            events.EventType = EventsType.Leave;
            events.EmployeeId = EmployeeId;   
            events.EventName = events.LeaveType == LeaveType.Vacation ? "Vacation Leave" : "Sick Leave";            
            var response = await httpClient.PostAsJsonAsync("Events/AddUpdateEvent", events);
            response.EnsureSuccessStatusCode();
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                Snackbar.Add("Leave request has been submitted for approval.", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to save leave request info: {response.StatusCode} - {errorMessage}", Severity.Error);
                Console.WriteLine($"Failed to save leave request info: {response.StatusCode} - {errorMessage}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception Occured: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }


    }

}
@page "/requests-portal"
@layout MainLayout
@using NCMS_wasm.Shared
@using NCMS_wasm.Client.Pages.Portal.Components
@attribute [Authorize(Roles = "Gas Employee,Front Desk,Human Resource")]
<PageTitle>NCMS | My Requests</PageTitle>
@if(!string.IsNullOrEmpty(currentUserId)){
<MudTabs Elevation="4" Rounded="true" Class="pt-3 w-100" Centered="false" Color="@Color.Primary">
    <MudTabPanel Icon="fas fa-calendar-week" IconColor="Color.Warning" Text="Requests Calendar" >
        <MudStack Class="w-100">
            <MudOverlay @bind-Visible="_overlayVisible" DarkBackground AutoClose="false">
                <MudLoading @bind-Loading="_overlayVisible" Overlap="false" LoaderType="LoaderType.Circular" Darken="true"
                            Color="Color.Primary" />
            </MudOverlay>

            
            <MudBreakpointProvider>
                <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
                    <MudCalendar HighlightToday
                                 ShowWorkWeek="false"
                                 ShowWeek="false"
                                 ShowDay="false"
                                 Elevation="1"
                                 ShowTodayButton="false"
                                 Style="width: 100%"
                                 CellClicked="CellClicked"                        
                                 MonthCellMinHeight="100"
                                 Items="_events">
                        <ToolbarContent>
                            <MudSpacer />
                            <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Warning" Size="Size.Small" /> Holiday</MudText>
                            <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Success" Size="Size.Small" /> Approved Leave</MudText>
                            <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Info" Size="Size.Small" /> For Approval Leave</MudText>
                            <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Error" Size="Size.Small" /> Rejected Leave</MudText>
                        </ToolbarContent>
                        <CellTemplate>
                            <div style="background-color: @GetColor(((CustomItem)context).Color)" class="pa-2 d-flex gap-1">
                                <MudText Style="color: white" Class="fw-bold" Typo="Typo.body2">@context.Text</MudText>
                            </div>
                        </CellTemplate>
                    </MudCalendar>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                    <MudStack Row Spacing="1">                        
                        <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Warning" Size="Size.Small" /> Holiday</MudText>
                        <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Success" Size="Size.Small" /> Approved Leave</MudText>
                        <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Info" Size="Size.Small" /> For Approval Leave</MudText>
                        <MudText Typo="Typo.button" Class="pt-1 py-2"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Error" Size="Size.Small" /> Rejected Leave</MudText>
                    </MudStack>
                    <MudCalendar HighlightToday
                                 ShowWorkWeek="false"
                                 ShowWeek="false"
                                 ShowDay="false"
                                 Elevation="1"
                                 Class="pr-1 pb-3"
                                 ShowTodayButton="false"                                 
                                 CellClicked="CellClicked"                                 
                                 MonthCellMinHeight="100"
                                 Items="_events">                       
                        <CellTemplate>
                            <div style="background-color: @GetColor(((CustomItem)context).Color)" class="pa-2 d-flex gap-1">
                                <MudText Style="color: white" Class="fw-bold" Typo="Typo.body2">@context.Text</MudText>
                            </div>
                        </CellTemplate>
                    </MudCalendar>
                </MudHidden>
            </MudBreakpointProvider>
        </MudStack>
    </MudTabPanel>
    <MudTabPanel Icon="fas fa-vote-yea" IconColor="Color.Success" Text="My Requests">
        <MudStack>
            <MudDataGrid Items="@leaveRequests" T="LeaveRequests" Loading="@isLoading" HeaderClass="mud-theme-default text-wrap" Dense ShowMenuIcon="false"
                         HorizontalScrollbar="true"
                         ColumnResizeMode="ResizeMode.Column">
                <ToolBarContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" Class="my-2 mx-1" StartIcon="@Icons.Material.Filled.Refresh" OnClick="LoadEventsList">Refresh</MudButton>
                    @* <MudButton Variant="Variant.Filled" Color="Color.Info" Class="my-2 mx-1" StartIcon="@Icons.Material.Filled.FamilyRestroom" OnClick="OpenAddGuestDialog">Add Guest</MudButton> *@
                    <MudSpacer />
                </ToolBarContent>
                <Columns>
                    @*  <TemplateColumn Title="Action">
                    <CellTemplate>
                    @if (context.Item.IsApproved == ApprovalType.ForApproval)
                    {
                    <MudTooltip Arrow="true" Text="Approve" Placement="Placement.Top">
                    <MudIconButton Icon="@Icons.Material.Filled.Check" Size="Size.Medium" OnClick="(() => UpdateRequests(context.Item,ApprovalType.Approved))" Variant="Variant.Filled" Color="Color.Success"></MudIconButton>
                    </MudTooltip>
                    <MudTooltip Arrow="true" Text="Reject" Placement="Placement.Top">
                    <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Medium" OnClick="(() => UpdateRequests(context.Item,ApprovalType.Rejected))" Variant="Variant.Filled" Color="Color.Error"></MudIconButton>
                    </MudTooltip>
                    }
                    </CellTemplate>
                    </TemplateColumn> *@
                    <PropertyColumn Title="Name" Property="x => x.EventName" Filterable="true">
                        <CellTemplate>
                            @context.Item.EventName.Split(" - ")[1]
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Title="Leave Type" Property="x => x.LeaveType.ToString()" Filterable="true" />
                    <PropertyColumn Title="Status" Property="x => x.IsApproved" Filterable="true">
                        <CellTemplate>
                            @if (context.Item.IsApproved == ApprovalType.Approved)
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Success">Approved</MudChip>
                            }
                            else if (context.Item.IsApproved == ApprovalType.ForApproval)
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Info">For Approval</MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Error">Rejected</MudChip>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Title="Duration" Property="x => x.EventStart" Filterable="false">
                        <CellTemplate>
                            @($"{context.Item.EventStart:MM/dd/yyyy} - {context.Item.EventEnd:MM/dd/yyyy}")
                        </CellTemplate>
                    </PropertyColumn>
                    <TemplateColumn Title="Created By">
                        <CellTemplate>
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.caption" Class="fst-italic">@context.Item.EventName.Split(" - ")[1]</MudText>
                                <MudText Typo="Typo.caption" Class="fst-italic">@($"{context.Item.CreatedOn:MM/dd/yyyy}")</MudText>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Updated By">
                        <CellTemplate>
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.caption" Class="fst-italic">@context.Item.UpdatedBy</MudText>
                                <MudText Typo="Typo.caption" Class="fst-italic">@($"{context.Item.UpdatedOn:MM/dd/yyyy}")</MudText>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <NoRecordsContent>
                    <MudText>No Records to show</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading Content...</MudText>
                </LoadingContent>
            </MudDataGrid>
        </MudStack>
    </MudTabPanel>
</MudTabs>
}
@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; private set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    private List<LeaveRequests> eventsList = new List<LeaveRequests>();
    private List<CustomItem> _events = new();
    private bool _overlayVisible;
    private List<LeaveRequests> leaveRequests = new List<LeaveRequests>();
    private bool isLoading = false;
    private string? currentUserId;
    [Inject] NavigationManager Navigation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MainLayout.SubTitle = "Employee Portal Module";
       var id = MainLayout.CurrentUserId; 
        currentUserId = await GetEmployeeInfoAsync(id);
        await LoadEventsList();
        await base.OnInitializedAsync();
    }

    private class CustomItem : CalendarItem
    {
        public int Id { get; set; } = 0;
        public Color Color { get; set; } = Color.Primary;
        public EventsType Type { get; set; } = EventsType.Leave;
        public string SubType { get; set; } = "Leave Request";
    }

    private async Task LoadEventsList()
    {

        try
        {
            _overlayVisible = true;
            _events = new();
            var filter = new EventFilter
                {
                    IsUser = true,
                    UserId = MainLayout.CurrentUserId
                };
            var response = await httpClient.PostAsJsonAsync("Events/GetEvents", filter);

            if (response.IsSuccessStatusCode)
            {
                eventsList = new();
                leaveRequests = new();
                eventsList = await response.Content.ReadFromJsonAsync<List<LeaveRequests>>();
                leaveRequests.AddRange(eventsList);
                foreach (var events in eventsList)
                {
                    var customItem = new CustomItem
                        {
                            Id = events.EventId,
                            Start = events.EventStart,
                            End = events.EventEnd,
                            Text = events.EventName,
                            Color = events.EventType == EventsType.Holiday ? Color.Warning : events.IsApproved == ApprovalType.ForApproval ? Color.Info : events.IsApproved == ApprovalType.Approved ? Color.Success : Color.Error,
                            Type = events.EventType,
                            SubType = events.SubType
                        };
                    _events.Add(customItem);
                }
            }

        }
        catch (Exception ex)
        {
            _overlayVisible = false;
            Snackbar.Add($"Exception Occured: {ex.Message}", Severity.Error);
            Console.WriteLine($"Exception Occured: {ex.Message}");
        }
        finally
        {
            _overlayVisible = false;
        }
    }

    private string GetColor(Color color) => $"var(--mud-palette-{color.ToDescriptionString()})";

    private async Task CellClicked(DateTime dateTime)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackdropClick = true,
                CloseButton = true
            };
        var parameters = new DialogParameters<AddLeaveRequest>
            {
             {x => x.StartDate,dateTime},
             {x => x.EndDate,dateTime},
             {x => x.EmployeeId, MainLayout.CurrentUserId}
            };
        var dialog = await DialogService.ShowAsync<AddLeaveRequest>("Simple Dialog", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadEventsList();
            StateHasChanged();
        }
    }

    public async Task<string> GetEmployeeInfoAsync(string id)
    {
        try
        {
            // Send a POST request with the ID in the request body
            var response = await httpClient.PostAsJsonAsync("Employee/GetMyInfo", id);

            // Ensure the request was successful
            if (response.IsSuccessStatusCode)
            {
                // Deserialize the response to an Employee object
                var employee = await response.Content.ReadFromJsonAsync<Employee>();
                return employee.IDNumber;
            }
            else
            {

                var errorMessage = await response.Content.ReadAsStringAsync();
                Navigation.NavigateTo("/Error");
                return String.Empty;
                // throw new HttpRequestException($"Error fetching employee info: {response.StatusCode} - {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
            throw;
        }
    }

   

}
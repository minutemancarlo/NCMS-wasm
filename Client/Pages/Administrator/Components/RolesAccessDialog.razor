@using NCMS_wasm.Shared
@using NCMS_wasm.Client.Pages.GeneralComponents
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Security"></MudIcon>
            Role Access
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="@model">
            <MudOverlay Visible="isLoading" DarkBackground="false" Absolute="true">
                <MudProgressCircular Color="Color.Warning" Indeterminate="true" />
            </MudOverlay>
            <MudStack Spacing="0">
                <MudText><strong>Name: </strong>@user.FirstName @user.LastName</MudText>
                <MudText><strong>Email: </strong>@user.Email</MudText>
                <MudText><strong>Last Login: </strong>@user.Last_Login</MudText>
            </MudStack>
            <MudDivider />
            <MudStack>
                <MudToggleGroup @ref="toggle" T="string" Vertical SelectionMode="SelectionMode.SingleSelection" @bind-Value="@model.Role_Id" Color="Color.Primary" CheckMark FixedContent>
                    <MudToggleItem Value="@("rol_z7LQFm4RqTAyYaqJ")">
                        <MudStack Spacing="0" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.body1" Class="fw-bold">Administrator</MudText>
                            <MudText Typo="Typo.caption">System Administrator</MudText>
                        </MudStack>
                    </MudToggleItem>
                    <MudToggleItem Value="@("rol_MKxjFGw5sDvO5HXW")">
                        <MudStack Spacing="0" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.body1" Class="fw-bold">Front Desk</MudText>
                            <MudText Typo="Typo.caption">Hotel Front Desk</MudText>
                        </MudStack>
                    </MudToggleItem>
                    <MudToggleItem Value="@("rol_ZH92sAR6ggvkxPOM")">
                        <MudStack Spacing="0" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.body1" Class="fw-bold">Gas Employee</MudText>
                            <MudText Typo="Typo.caption">Gas Station Employee</MudText>
                        </MudStack>
                    </MudToggleItem>
                    <MudToggleItem Value="@("rol_Auk4u6P2AUid2gwT")">
                        <MudStack Spacing="0" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.body1" Class="fw-bold">Guests</MudText>
                            <MudText Typo="Typo.caption">Hotel Guest</MudText>
                        </MudStack>
                    </MudToggleItem>
                    <MudToggleItem Value="@("rol_ZmH7XuUWNYOzQlfT")">
                        <MudStack Spacing="0" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.body1" Class="fw-bold">Human Resource</MudText>
                            <MudText Typo="Typo.caption">HR Employees</MudText>
                        </MudStack>
                    </MudToggleItem>
                </MudToggleGroup>
            </MudStack>
        </MudForm>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSubmit">Submit</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] IDialogService? DialogService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public UserDto? user { get; set; }
    private bool isLoading = false;
    [Parameter] public RoleAssignment model { get; set; }
    private List<RolesProperty> roles = new List<RolesProperty>();
    MudForm form;
    MudToggleGroup<string> toggle;
    protected override async Task OnInitializedAsync()
    {
        // await GetRoles();
        StateHasChanged();
        await base.OnInitializedAsync();
    }



    private async Task GetRoles()
    {
        isLoading = true;
        try
        {
            roles = await httpClient.GetFromJsonAsync<List<RolesProperty>>("UserManagement/GetAllRoles");

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }

    }

    private async Task OnSubmit()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackdropClick = true,                
                CloseButton = false
            };
        var parameters = new DialogParameters<ConfirmationDialog>();
        parameters.Add(x => x.Action, "Please confirm your action.");
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Simple Dialog", parameters, options);
        var result = await dialog.Result;
        bool data = (bool)result.Data;
        if (data)
        {
            await SetUserRole();
            Snackbar.Add("User Role Updated", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        
    }

    private async Task SetUserRole()
    {
        try
        {
            var data = new SetUserRole
            {
                UserId= user.User_Id,
                RoleId = model.Role_Id
            };

            HttpResponseMessage response = await httpClient.PostAsJsonAsync("UserManagement/SetUserRole", data);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();                
            }
            else
            {
                Snackbar.Add($"Failed to set user role. Status code: {response.StatusCode}",Severity.Error);
                Console.WriteLine($"Failed to set user role. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Exception Occurred: {ex.Message}",Severity.Error);
            Console.WriteLine($"Exception Occurred: {ex.Message}");
        }
    }



    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}
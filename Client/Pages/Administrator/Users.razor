@page "/admin-usersmanagement"
@attribute [Authorize(Roles = "Administrator")]
@using NCMS_wasm.Shared
@using NCMS_wasm.Client.Pages.Administrator.Components

<MudStack>
    <MudText Typo="Typo.h5">User Management</MudText>
    <MudDataGrid Items="@usersList" T="UserDto" Loading="@isLoading" Dense HeaderClass="mud-theme-default text-nowrap" ShowMenuIcon ColumnResizeMode="ResizeMode.Container">
        <ToolBarContent>
            <MudButton Variant="Variant.Filled" Color="Color.Success" Class="my-2 mx-1" StartIcon="@Icons.Material.Filled.Refresh" OnClick="@(async () => await LoadUsers())">Refresh</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Info" Class="my-2 mx-1" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddUserDialog">Add User</MudButton>
            <MudSpacer/>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Email" Filterable="true" />
            <PropertyColumn Property="x => x.FirstName" Title="First Name" Filterable="true" />
            <PropertyColumn Property="x => x.LastName" Title="Last Name" Filterable="true" />
            <TemplateColumn Title="Email Verified" Filterable="true" Hidden Hideable="true">
                <CellTemplate>
                    @if (context.Item.Verified==true)
                    {
                        <MudChip Color="Color.Success">Yes</MudChip>
                    }
                    else
                    {
                        <MudChip Color="Color.Error">No</MudChip>
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Blocked" Filterable="true" Hidden Hideable="true">
                <CellTemplate>
                    @if (context.Item.Blocked)
                    {
                        <MudChip Color="Color.Error">Yes</MudChip>
                    }
                    else
                    {
                        <MudChip Color="Color.Success">No</MudChip>
                    }
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Last_Login" Title="Last Login" Filterable="true" />
            <TemplateColumn Title="Actions" Sortable="false" Hideable="false" Filterable="false">
                <CellTemplate>
                    <MudStack Row>
                        <MudTooltip Text="Roles" Arrow="true" Color="Color.Primary" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Filled.Security" OnClick="@(() => OpenRoleAccessDialog(context.Item))"></MudIconButton>
                        </MudTooltip>
                        @* <MudTooltip Text="Disable/Enable" Arrow="true" Color="Color." Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Filled.LockPerson"></MudIconButton>
                        </MudTooltip> *@
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <NoRecordsContent>
            <MudText>No Records to show</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading Content...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudDataGridPager T="UserDto" />
        </PagerContent>
    </MudDataGrid>
</MudStack>




@code {
    [Inject] HttpClient? httpClient { get; set; }
    [Inject] IDialogService? DialogService { get; set; }
    private List<UserDto> usersList = new List<UserDto>();
    private bool isLoading = true;
    private string roleid { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await base.OnInitializedAsync();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        try
        {
            usersList = await httpClient.GetFromJsonAsync<List<UserDto>>("UserManagement/UsersList");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }

    }

    private async Task OpenRoleAccessDialog(UserDto userDto)
    {
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = false, 
            FullWidth = true, 
            MaxWidth = MaxWidth.Small,
            BackdropClick=true,
            CloseButton = true 
        };
        await GetUserRole(userDto.User_Id);
        var parameters = new DialogParameters<RolesAccessDialog>();
        parameters.Add(x => x.user, userDto);   
        parameters.Add(x => x.model, new RoleAssignment { Id = userDto.User_Id, Role_Id = roleid } );
        DialogService.Show<RolesAccessDialog>("Simple Dialog", parameters,options);
    }

    private async Task OpenAddUserDialog()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                FullWidth = true,
                MaxWidth = MaxWidth.Small,
                BackdropClick = true,
                CloseButton = true                
            };                        
        var dialog = await DialogService.ShowAsync<AddUserDialog>("Simple Dialog", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadUsers();
            StateHasChanged();
        }
    }

    private async Task GetUserRole(string userid)
    {
        try
        {
            HttpResponseMessage response = await httpClient.PostAsJsonAsync("UserManagement/GetUserRole",userid);

            if (response.IsSuccessStatusCode)
            {
                roleid = await response.Content.ReadAsStringAsync();
            }
            else
            {
                Console.WriteLine($"Failed to get user role. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception Occurred: {ex.Message}");
        }
    }

}

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<AuthorizeView>
    <Authorized>
        <MudMenu Dense>
            <ActivatorContent>
                <MudAvatar>
                    <ChildContent>
                        <MudImage Src="@Picture" Width="25" Height="25" />
                    </ChildContent>
                </MudAvatar>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem Icon="@Icons.Material.Filled.Person">Account</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="BeginSignOut">Sign Out</MudMenuItem>
            </ChildContent>
        </MudMenu>
    </Authorized>
    <NotAuthorized>
        <MudButton Href="authentication/login" Class="my-2 mx-1" Variant="Variant.Filled" Color="Color.Success" StartIcon="fas fa-sign-in-alt">Login</MudButton>
        <MudButton Href="authentication/signup" Class="my-2 mx-1" Variant="Variant.Filled" Color="Color.Warning" Disabled StartIcon="fas fa-user-plus">Sign Up</MudButton>
    </NotAuthorized>
</AuthorizeView>

@code {

    public string Picture = "";
    public bool isLoggedin = false;
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    public List<Claim> UserClaims { get; set; } = new List<Claim>();
    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;

            if (state.User.Identity.IsAuthenticated)
            {
                var user = authenticationState.Result.User;

                Picture = state?.User.Claims
                            .Where(c => c.Type.Equals("picture"))
                            .Select(c => c.Value)
                            .FirstOrDefault() ?? string.Empty;
                // navigationManager.NavigateTo("login?redirectUri=/");
            }
        }



        await base.OnInitializedAsync();
    }
    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}